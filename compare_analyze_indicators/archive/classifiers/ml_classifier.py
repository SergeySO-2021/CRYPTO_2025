"""
ML-–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ä—ã–Ω–æ—á–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤
–ê–¥–∞–ø—Ç–∞—Ü–∏—è –∏–∑ 11_adaptive_market_regime_ml_classifier.ipynb
"""

import pandas as pd
import numpy as np
from sklearn.cluster import KMeans, DBSCAN
from sklearn.mixture import GaussianMixture
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import silhouette_score
from sklearn.decomposition import PCA
import warnings
warnings.filterwarnings('ignore')


class AdaptiveMarketRegimeMLClassifier:
    """–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π ML-–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ä—ã–Ω–æ—á–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–µ–π"""
    
    def __init__(self, n_clusters=4, method='kmeans'):
        self.n_clusters = n_clusters
        self.method = method
        self.scaler = StandardScaler()
        self.model = None
        self.feature_names = []
        self.cluster_labels = []
        self.regime_names = {}
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–µ—Ç–æ–¥–∞
        if method == 'kmeans':
            self.model = KMeans(n_clusters=n_clusters, random_state=42, n_init=10)
        elif method == 'dbscan':
            self.model = DBSCAN(eps=0.5, min_samples=50)
        elif method == 'gmm':
            self.model = GaussianMixture(n_components=n_clusters, random_state=42)
        
        print(f"‚úÖ AdaptiveMarketRegimeMLClassifier –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
        print(f"ü§ñ –ú–µ—Ç–æ–¥ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏: {method.upper()}")
        print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤: {n_clusters}")
    
    def extract_classification_features(self, data):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è ML"""
        print("üîç –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏...")
        
        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ data - —ç—Ç–æ DataFrame
        if not isinstance(data, pd.DataFrame):
            print("‚ö†Ô∏è –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ DataFrame")
            data = pd.DataFrame(data)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
        required_columns = ['open', 'high', 'low', 'close']
        if not all(col in data.columns for col in required_columns):
            print(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏. –î–æ—Å—Ç—É–ø–Ω—ã–µ: {list(data.columns)}")
            # –ï—Å–ª–∏ —ç—Ç–æ numpy array, —Å–æ–∑–¥–∞–µ–º DataFrame —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏
            if isinstance(data, np.ndarray):
                data = pd.DataFrame(data, columns=['open', 'high', 'low', 'close'])
            else:
                # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–µ—Ä–≤—ã–µ 4 –∫–æ–ª–æ–Ω–∫–∏ –∫–∞–∫ OHLC
                data = data.iloc[:, :4]
                data.columns = ['open', 'high', 'low', 'close']
        
        features = pd.DataFrame(index=data.index)
        
        # ===== –ì–†–£–ü–ü–ê 1: –¢–†–ï–ù–î –ò –°–ò–õ–ê =====
        
        # ADX - —Å–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
        high_low = data['high'] - data['low']
        high_close = np.abs(data['high'] - data['close'].shift(1))
        low_close = np.abs(data['low'] - data['close'].shift(1))
        true_range = np.maximum(high_low, np.maximum(high_close, low_close))
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º numpy array –≤ pandas Series
        true_range = pd.Series(true_range, index=data.index)
        atr = true_range.rolling(14).mean()
        
        # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π ADX
        plus_dm = np.where((data['high'].diff() > data['low'].diff().abs()) & (data['high'].diff() > 0), data['high'].diff(), 0)
        minus_dm = np.where((data['low'].diff().abs() > data['high'].diff()) & (data['low'].diff() < 0), data['low'].diff().abs(), 0)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º numpy arrays –æ–±—Ä–∞—Ç–Ω–æ –≤ pandas Series
        plus_dm = pd.Series(plus_dm, index=data.index)
        minus_dm = pd.Series(minus_dm, index=data.index)
        
        plus_di = 100 * (plus_dm.rolling(14).mean() / atr)
        minus_di = 100 * (minus_dm.rolling(14).mean() / atr)
        dx = 100 * np.abs(plus_di - minus_di) / (plus_di + minus_di)
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º numpy array –≤ pandas Series
        dx = pd.Series(dx, index=data.index)
        adx = dx.rolling(14).mean()
        
        features['adx_value'] = adx
        features['adx_trend'] = (adx > 25).astype(int)
        
        # ===== –ì–†–£–ü–ü–ê 2: –í–û–õ–ê–¢–ò–õ–¨–ù–û–°–¢–¨ =====
        
        # Bollinger Bands Width
        bb_period = 20
        bb_std = 2
        bb_middle = data['close'].rolling(bb_period).mean()
        bb_std_val = data['close'].rolling(bb_period).std()
        bb_upper = bb_middle + (bb_std_val * bb_std)
        bb_lower = bb_middle - (bb_std_val * bb_std)
        bb_width = (bb_upper - bb_lower) / bb_middle
        
        features['bb_width'] = bb_width
        features['bb_squeeze'] = (bb_width < bb_width.rolling(20).mean() * 0.8).astype(int)
        
        # ATR
        features['atr_value'] = atr
        features['atr_ratio'] = atr / atr.rolling(20).mean()
        
        # ===== –ì–†–£–ü–ü–ê 3: –ò–ú–ü–£–õ–¨–° –ò –¶–ò–ö–õ–´ =====
        
        # RSI
        delta = data['close'].diff()
        gain = (delta.where(delta > 0, 0)).rolling(window=14).mean()
        loss = (-delta.where(delta < 0, 0)).rolling(window=14).mean()
        rs = gain / loss
        rsi = 100 - (100 / (1 + rs))
        
        features['rsi_value'] = rsi
        features['rsi_trend'] = rsi.diff(5)
        
        # MACD
        ema_12 = data['close'].ewm(span=12).mean()
        ema_26 = data['close'].ewm(span=26).mean()
        macd_line = ema_12 - ema_26
        signal_line = macd_line.ewm(span=9).mean()
        macd_histogram = macd_line - signal_line
        
        features['macd_histogram'] = macd_histogram
        features['macd_histogram_slope'] = macd_histogram.diff(5)
        
        # ===== –ì–†–£–ü–ü–ê 4: –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ü–†–ò–ó–ù–ê–ö–ò =====
        
        # –ü–æ–∑–∏—Ü–∏—è —Ü–µ–Ω—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Å–∫–æ–ª—å–∑—è—â–∏—Ö —Å—Ä–µ–¥–Ω–∏—Ö
        ma_50 = data['close'].rolling(50).mean()
        ma_200 = data['close'].rolling(200).mean()
        
        features['price_vs_ma50'] = (data['close'] / ma_50 - 1) * 100
        features['price_vs_ma200'] = (data['close'] / ma_200 - 1) * 100
        features['ma50_vs_ma200'] = (ma_50 / ma_200 - 1) * 100
        
        # –î–∏–Ω–∞–º–∏–∫–∞ –æ–±—ä–µ–º–∞
        if 'volume' in data.columns:
            volume_ma = data['volume'].rolling(20).mean()
            features['volume_ratio'] = data['volume'] / volume_ma
            features['volume_trend'] = data['volume'].rolling(5).mean().diff(5)
        else:
            features['volume_ratio'] = 1.0
            features['volume_trend'] = 0
        
        # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–ø—É—Å–∫–∏
        features = features.fillna(0)
        
        print(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(features.columns)} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
        return features
    
    def fit(self, data):
        """–û–±—É—á–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞"""
        print("ü§ñ –û–±—É—á–µ–Ω–∏–µ ML-–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞...")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
        features = self.extract_classification_features(data)
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
        features_scaled = self.scaler.fit_transform(features)
        
        # –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å
        if self.method == 'dbscan':
            self.model.fit(features_scaled)
            self.cluster_labels = self.model.labels_
        else:
            self.model.fit(features_scaled)
            self.cluster_labels = self.model.predict(features_scaled)
        
        # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Ç–µ—Ä—ã
        self.regime_names = self.interpret_clusters(features, self.cluster_labels)
        
        print(f"‚úÖ ML-–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ–±—É—á–µ–Ω!")
        print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤: {len(np.unique(self.cluster_labels))}")
        
        return self
    
    def predict(self, data):
        """–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Ä–µ–∂–∏–º–æ–≤"""
        print("üîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Ä–µ–∂–∏–º–æ–≤...")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
        features = self.extract_classification_features(data)
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
        features_scaled = self.scaler.transform(features)
        
        # –ü—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞—Å—Ç–µ—Ä—ã
        if self.method == 'dbscan':
            cluster_labels = self.model.fit_predict(features_scaled)
        else:
            cluster_labels = self.model.predict(features_scaled)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ä–µ–∂–∏–º—ã (-1, 0, 1)
        predictions = []
        for label in cluster_labels:
            if label in self.regime_names:
                regime = self.regime_names[label]
                if 'bull' in regime.lower():
                    predictions.append(1)
                elif 'bear' in regime.lower():
                    predictions.append(-1)
                else:
                    predictions.append(0)
            else:
                predictions.append(0)
        
        print(f"‚úÖ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–æ {len(predictions)} —Ä–µ–∂–∏–º–æ–≤")
        return np.array(predictions)
    
    def interpret_clusters(self, features, cluster_labels):
        """–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –∫–ª–∞—Å—Ç–µ—Ä–æ–≤"""
        regime_names = {}
        unique_labels = np.unique(cluster_labels)
        
        for label in unique_labels:
            if label == -1:  # –®—É–º –≤ DBSCAN
                regime_names[label] = "Noise"
                continue
                
            cluster_mask = cluster_labels == label
            cluster_features = features[cluster_mask]
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∫–ª–∞—Å—Ç–µ—Ä–∞
            avg_rsi = cluster_features['rsi_value'].mean()
            avg_adx = cluster_features['adx_value'].mean()
            avg_bb_width = cluster_features['bb_width'].mean()
            avg_price_vs_ma50 = cluster_features['price_vs_ma50'].mean()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
            if avg_rsi > 60 and avg_adx > 25 and avg_price_vs_ma50 > 0:
                regime_names[label] = "Strong Bull"
            elif avg_rsi < 40 and avg_adx > 25 and avg_price_vs_ma50 < 0:
                regime_names[label] = "Strong Bear"
            elif avg_bb_width < cluster_features['bb_width'].quantile(0.3):
                regime_names[label] = "Low Volatility Sideways"
            elif avg_bb_width > cluster_features['bb_width'].quantile(0.7):
                regime_names[label] = "High Volatility Sideways"
            else:
                regime_names[label] = "Sideways"
        
        print(f"üìä –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –∫–ª–∞—Å—Ç–µ—Ä–æ–≤:")
        for label, regime in regime_names.items():
            print(f"   –ö–ª–∞—Å—Ç–µ—Ä {label}: {regime}")
        
        return regime_names
