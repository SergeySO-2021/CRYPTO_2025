"""
üîç –ê–ù–ê–õ–ò–ó –í–ê–®–ï–ì–û –¢–ï–ö–£–©–ï–ì–û MZA
–ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –∑–æ–Ω –Ω–∞ 15m –∏ 1h
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import sys
import os
from datetime import datetime
import warnings
warnings.filterwarnings('ignore')

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
current_dir = os.getcwd()
if 'indicator_optimization' in current_dir:
    sys.path.append('.')
else:
    sys.path.append('./indicator_optimization/01_mza_optimization')

try:
    from data_loader import load_btc_data
    from accurate_mza_classifier import AccurateMZAClassifier
    from mza_quality_analyzer import MZAQualityAnalyzer
    print("‚úÖ –ú–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")

def analyze_current_mza():
    """–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ MZA –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞—Ö"""
    print("üîç –ê–ù–ê–õ–ò–ó –í–ê–®–ï–ì–û –¢–ï–ö–£–©–ï–ì–û MZA")
    print("=" * 50)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    print("üìä –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ...")
    btc_data = load_btc_data()
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –≤–∞—à–µ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ 15m
    params_15m = {
        'adxLength': 16,
        'adxThreshold': 25,
        'fastMALength': 18,
        'slowMALength': 45,
        'rsiLength': 12,
        'stochKLength': 16,
        'macdFast': 10,
        'macdSlow': 24,
        'macdSignal': 8,
        'hhllRange': 22,
        'haDojiRange': 6,
        'candleRangeLength': 10,
        'bbLength': 18,
        'bbMultiplier': 2.2,
        'atrLength': 12,
        'kcLength': 18,
        'kcMultiplier': 1.8,
        'volumeMALength': 18,
        'trendWeightBase': 42,
        'momentumWeightBase': 32,
        'priceActionWeightBase': 26,
        'useSmoothing': True,
        'useHysteresis': True
    }
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è 1h (–∏–∑ –≤–∞—à–µ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏)
    params_1h = {
        'adxLength': 15,
        'adxThreshold': 22,
        'fastMALength': 19,
        'slowMALength': 47,
        'rsiLength': 13,
        'stochKLength': 15,
        'macdFast': 11,
        'macdSlow': 25,
        'macdSignal': 9,
        'hhllRange': 21,
        'haDojiRange': 7,
        'candleRangeLength': 11,
        'bbLength': 19,
        'bbMultiplier': 2.1,
        'atrLength': 13,
        'kcLength': 19,
        'kcMultiplier': 1.7,
        'volumeMALength': 19,
        'trendWeightBase': 41,
        'momentumWeightBase': 33,
        'priceActionWeightBase': 26,
        'useSmoothing': True,
        'useHysteresis': True
    }
    
    analyzer = MZAQualityAnalyzer()
    results_list = []
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º
    timeframes = ['15m', '1h', '4h']
    params_dict = {'15m': params_15m, '1h': params_1h, '4h': params_1h}  # –î–ª—è 4h –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã 1h
    
    for tf in timeframes:
        if tf in btc_data:
            print(f"\n{'='*60}")
            print(f"üîç –ê–ù–ê–õ–ò–ó –¢–ê–ô–ú–§–†–ï–ô–ú–ê: {tf}")
            print(f"{'='*60}")
            
            data = btc_data[tf]
            params = params_dict[tf]
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä
            classifier = AccurateMZAClassifier(params)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∑–æ–Ω
            print(f"üß† –í—ã—á–∏—Å–ª—è–µ–º –∑–æ–Ω—ã –¥–ª—è {tf}...")
            zones = classifier.predict(data)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
            results = analyzer.analyze_mza_quality(data, zones, params, tf)
            results_list.append(results)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            results['data'] = data
            results['zones'] = zones
            results['params'] = params
            
        else:
            print(f"‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –¥–ª—è {tf} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã
    if len(results_list) > 1:
        print(f"\n{'='*60}")
        print("üìä –°–†–ê–í–ù–ï–ù–ò–ï –ü–û –¢–ê–ô–ú–§–†–ï–ô–ú–ê–ú")
        print(f"{'='*60}")
        
        comparison_df = analyzer.compare_timeframes(results_list)
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print_recommendations(results_list)
    
    return results_list

def print_recommendations(results_list):
    """–í—ã–≤–æ–¥–∏—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é MZA"""
    print(f"\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –£–õ–£–ß–®–ï–ù–ò–Æ MZA:")
    print("=" * 50)
    
    # –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    best_result = max(results_list, key=lambda x: x['composite_score'])
    worst_result = min(results_list, key=lambda x: x['composite_score'])
    
    print(f"üèÜ –õ–£–ß–®–ò–ô –¢–ê–ô–ú–§–†–ï–ô–ú: {best_result['timeframe']}")
    print(f"   Composite Score: {best_result['composite_score']:.6f}")
    print(f"   Economic Value: {best_result['economic_value']:.6f}")
    
    print(f"\n‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ù–´–ô –¢–ê–ô–ú–§–†–ï–ô–ú: {worst_result['timeframe']}")
    print(f"   Composite Score: {worst_result['composite_score']:.6f}")
    print(f"   Economic Value: {worst_result['economic_value']:.6f}")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—ã
    print(f"\nüîç –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú:")
    
    for result in results_list:
        tf = result['timeframe']
        ev = result['economic_value']
        zs = result['zone_stability']
        sc = result['signal_consistency']
        
        print(f"\nüìä {tf}:")
        
        if ev < 0.001:
            print(f"   ‚ùå Economic Value —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∏–π ({ev:.6f})")
            print(f"      üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –£–≤–µ–ª–∏—á—å—Ç–µ adxThreshold –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ç–∞–π–º—Ñ—Ä–µ–π–º")
        
        if zs < 0.4:
            print(f"   ‚ùå –ó–æ–Ω—ã –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã ({zs:.3f})")
            print(f"      üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –í–∫–ª—é—á–∏—Ç–µ useSmoothing=True –∏ useHysteresis=True")
        
        if sc < 0.5:
            print(f"   ‚ùå –ù–∏–∑–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å —Å–∏–≥–Ω–∞–ª–æ–≤ ({sc:.3f})")
            print(f"      üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ü–µ—Ä–µ–æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ç–∞–π–º—Ñ—Ä–µ–π–º")
        
        if ev > 0.005 and zs > 0.6 and sc > 0.5:
            print(f"   ‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ —Ö–æ—Ä–æ—à–µ–µ!")
    
    # –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print(f"\nüöÄ –û–ë–©–ò–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("   1. üìä –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ª—É—á—à–∏–π —Ç–∞–π–º—Ñ—Ä–µ–π–º –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏")
    print("   2. üîÑ –†–µ–≥—É–ª—è—Ä–Ω–æ –ø–µ—Ä–µ–æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (—Ä–∞–∑ –≤ –º–µ—Å—è—Ü)")
    print("   3. üìà –ù–µ –ø–æ–ª–∞–≥–∞–π—Ç–µ—Å—å —Ç–æ–ª—å–∫–æ –Ω–∞ MZA - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã")
    print("   4. ‚ö†Ô∏è –¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö –∞–∫—Ç–∏–≤–∞—Ö –∏ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö")
    print("   5. üéØ –§–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ Economic Value > 0.005 –¥–ª—è —Ö–æ—Ä–æ—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞")

def create_visual_analysis(results_list):
    """–°–æ–∑–¥–∞–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    print(f"\nüìä –°–û–ó–î–ê–ï–ú –í–ò–ó–£–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó...")
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
    timeframes = [r['timeframe'] for r in results_list]
    economic_values = [r['economic_value'] for r in results_list]
    zone_stabilities = [r['zone_stability'] for r in results_list]
    signal_consistencies = [r['signal_consistency'] for r in results_list]
    composite_scores = [r['composite_score'] for r in results_list]
    
    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
    fig, axes = plt.subplots(2, 2, figsize=(15, 10))
    fig.suptitle('–ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ MZA –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º', fontsize=16)
    
    # Economic Value
    axes[0, 0].bar(timeframes, economic_values, color=['green', 'blue', 'orange'])
    axes[0, 0].set_title('Economic Value')
    axes[0, 0].set_ylabel('Economic Value')
    axes[0, 0].axhline(y=0.005, color='red', linestyle='--', label='–•–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ')
    axes[0, 0].legend()
    
    # Zone Stability
    axes[0, 1].bar(timeframes, zone_stabilities, color=['green', 'blue', 'orange'])
    axes[0, 1].set_title('Zone Stability')
    axes[0, 1].set_ylabel('Zone Stability')
    axes[0, 1].axhline(y=0.6, color='red', linestyle='--', label='–°—Ç–∞–±–∏–ª—å–Ω—ã–µ –∑–æ–Ω—ã')
    axes[0, 1].legend()
    
    # Signal Consistency
    axes[1, 0].bar(timeframes, signal_consistencies, color=['green', 'blue', 'orange'])
    axes[1, 0].set_title('Signal Consistency')
    axes[1, 0].set_ylabel('Signal Consistency')
    axes[1, 0].axhline(y=0.5, color='red', linestyle='--', label='–°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å')
    axes[1, 0].legend()
    
    # Composite Score
    axes[1, 1].bar(timeframes, composite_scores, color=['green', 'blue', 'orange'])
    axes[1, 1].set_title('Composite Score')
    axes[1, 1].set_ylabel('Composite Score')
    axes[1, 1].axhline(y=0.005, color='red', linestyle='--', label='–•–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ')
    axes[1, 1].legend()
    
    plt.tight_layout()
    plt.savefig('indicator_optimization/01_mza_optimization/mza_quality_analysis.png', 
                dpi=300, bbox_inches='tight')
    plt.show()
    
    print("‚úÖ –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ mza_quality_analysis.png")

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
    results = analyze_current_mza()
    
    # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    if len(results) > 1:
        create_visual_analysis(results)
    
    print(f"\nüéâ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù!")
    print("üìä –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã—à–µ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –≤–∞—à–µ–≥–æ MZA")
