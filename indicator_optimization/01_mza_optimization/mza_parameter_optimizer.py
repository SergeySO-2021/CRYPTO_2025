"""
–°–∏—Å—Ç–µ–º–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ MZA –¥–ª—è TradingView
–ù–∞—Ö–æ–¥–∏—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ Python, —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–ª—è Pine Script
"""

import pandas as pd
import numpy as np
from typing import Dict, List, Tuple, Optional
import itertools
from scipy.optimize import minimize
import warnings
warnings.filterwarnings('ignore')

class MZAParameterOptimizer:
    """
    –û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ MZA –¥–ª—è TradingView
    
    –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
    - –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã MZA
    - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ BTC
    - –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç Pine Script
    - –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞ MZA
    """
    
    def __init__(self):
        # –ö–ª—é—á–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã MZA –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        self.optimizable_params = {
            # Trend Indicators
            'adx_length': {'min': 10, 'max': 20, 'step': 1, 'default': 14},
            'adx_threshold': {'min': 15, 'max': 30, 'step': 1, 'default': 20},
            'fast_ma_length': {'min': 15, 'max': 25, 'step': 1, 'default': 20},
            'slow_ma_length': {'min': 40, 'max': 60, 'step': 1, 'default': 50},
            
            # Momentum Indicators
            'rsi_length': {'min': 10, 'max': 20, 'step': 1, 'default': 14},
            'rsi_overbought': {'min': 65, 'max': 80, 'step': 1, 'default': 70},
            'rsi_oversold': {'min': 20, 'max': 35, 'step': 1, 'default': 30},
            'stoch_length': {'min': 10, 'max': 20, 'step': 1, 'default': 14},
            'macd_fast': {'min': 8, 'max': 16, 'step': 1, 'default': 12},
            'macd_slow': {'min': 20, 'max': 30, 'step': 1, 'default': 26},
            
            # Price Action Indicators
            'bb_length': {'min': 15, 'max': 25, 'step': 1, 'default': 20},
            'bb_std': {'min': 1.5, 'max': 3.0, 'step': 0.1, 'default': 2.0},
            'atr_length': {'min': 10, 'max': 20, 'step': 1, 'default': 14},
            
            # Dynamic Weights (–¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏)
            'trend_weight_high_vol': {'min': 0.4, 'max': 0.6, 'step': 0.05, 'default': 0.5},
            'momentum_weight_high_vol': {'min': 0.3, 'max': 0.4, 'step': 0.05, 'default': 0.35},
            'price_action_weight_low_vol': {'min': 0.4, 'max': 0.6, 'step': 0.05, 'default': 0.45}
        }
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        self.optimization_results = {}
        self.best_parameters = {}
        
    def generate_parameter_combinations(self, max_combinations: int = 1000) -> List[Dict]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        
        Args:
            max_combinations: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        """
        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–∫–∏ –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
        param_values = {}
        for param, config in self.optimizable_params.items():
            values = np.arange(config['min'], config['max'] + config['step'], config['step'])
            param_values[param] = values
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
        combinations = []
        
        # –ï—Å–ª–∏ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª—É—á–∞–π–Ω—É—é –≤—ã–±–æ—Ä–∫—É
        total_combinations = np.prod([len(values) for values in param_values.values()])
        
        if total_combinations <= max_combinations:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Å–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
            for combination in itertools.product(*param_values.values()):
                param_dict = dict(zip(param_values.keys(), combination))
                combinations.append(param_dict)
        else:
            # –°–ª—É—á–∞–π–Ω–∞—è –≤—ã–±–æ—Ä–∫–∞
            for _ in range(max_combinations):
                param_dict = {}
                for param, values in param_values.items():
                    param_dict[param] = np.random.choice(values)
                combinations.append(param_dict)
        
        print(f"üìä –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(combinations)} –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
        return combinations
    
    def test_parameter_combination(self, params: Dict, data: pd.DataFrame) -> Dict:
        """
        –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–∞ –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            params: –°–ª–æ–≤–∞—Ä—å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            data: –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        try:
            # –°–æ–∑–¥–∞–µ–º MZA –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            mza_classifier = self.create_test_mza_classifier(params)
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ –¥–∞–Ω–Ω—ã—Ö
            predictions = mza_classifier.fit_predict(data)
            
            # –í—ã—á–∏—Å–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
            metrics = self.calculate_quality_metrics(data, predictions)
            
            return {
                'parameters': params,
                'metrics': metrics,
                'success': True
            }
            
        except Exception as e:
            return {
                'parameters': params,
                'error': str(e),
                'success': False
            }
    
    def create_test_mza_classifier(self, params: Dict):
        """–°–æ–∑–¥–∞–µ—Ç MZA –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º VectorizedMZAClassifier
        import sys
        from pathlib import Path
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º
        project_root = Path(__file__).parent.parent.parent
        classifiers_path = project_root / 'compare_analyze_indicators' / 'classifiers'
        sys.path.insert(0, str(classifiers_path))
        
        try:
            from mza_classifier_vectorized import VectorizedMZAClassifier
            print("‚úÖ VectorizedMZAClassifier –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            return VectorizedMZAClassifier(parameters=params)
        except ImportError as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å VectorizedMZAClassifier: {e}")
            print("üîÑ –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ base_optimization_system...")
            
            # –ü—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑ base_optimization_system
            try:
                sys.path.insert(0, str(project_root / 'indicator_optimization'))
                from base_optimization_system import VectorizedMZAClassifier
                print("‚úÖ VectorizedMZAClassifier –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ base_optimization_system")
                return VectorizedMZAClassifier(parameters=params)
            except ImportError as e2:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å VectorizedMZAClassifier: {e2}")
                raise ImportError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å VectorizedMZAClassifier –Ω–∏ –∏–∑ –æ–¥–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞")
    
    def create_simple_mza_classifier(self, params: Dict):
        """–°–æ–∑–¥–∞–µ—Ç —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é MZA –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        class SimpleMZAClassifier:
            def __init__(self, parameters):
                self.params = parameters
                
            def fit_predict(self, data):
                # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ MZA
                predictions = np.zeros(len(data))
                
                # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ RSI –∏ MA
                rsi_length = self.params.get('rsi_length', 14)
                rsi_overbought = self.params.get('rsi_overbought', 70)
                rsi_oversold = self.params.get('rsi_oversold', 30)
                
                # –í—ã—á–∏—Å–ª—è–µ–º RSI
                delta = data['close'].diff()
                gain = (delta.where(delta > 0, 0)).rolling(window=rsi_length).mean()
                loss = (-delta.where(delta < 0, 0)).rolling(window=rsi_length).mean()
                rs = gain / loss
                rsi = 100 - (100 / (1 + rs))
                
                # –ü—Ä–æ—Å—Ç–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è
                for i in range(len(data)):
                    if i < rsi_length:
                        predictions[i] = 0  # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö
                    elif rsi.iloc[i] > rsi_overbought:
                        predictions[i] = -1  # Bear
                    elif rsi.iloc[i] < rsi_oversold:
                        predictions[i] = 1   # Bull
                    else:
                        predictions[i] = 0   # Sideways
                
                return predictions
        
        return SimpleMZAClassifier(params)
    
    def calculate_quality_metrics(self, data: pd.DataFrame, predictions: np.ndarray) -> Dict:
        """
        –í—ã—á–∏—Å–ª—è–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
        
        Args:
            data: –î–∞–Ω–Ω—ã–µ
            predictions: –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
        """
        # –í—ã—á–∏—Å–ª—è–µ–º –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å
        returns = data['close'].pct_change().dropna()
        
        # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
        aligned_returns = returns.iloc[1:]
        aligned_predictions = predictions[1:len(aligned_returns)+1]
        
        # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º
        bull_mask = aligned_predictions == 1
        bear_mask = aligned_predictions == -1
        sideways_mask = aligned_predictions == 0
        
        # –ú–µ—Ç—Ä–∏–∫–∏ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
        bull_returns = aligned_returns[bull_mask].mean() if bull_mask.any() else 0
        bear_returns = aligned_returns[bear_mask].mean() if bear_mask.any() else 0
        sideways_returns = aligned_returns[sideways_mask].mean() if sideways_mask.any() else 0
        
        # Economic Value
        return_spread = abs(bull_returns - bear_returns)
        sideways_vol = aligned_returns[sideways_mask].std() if sideways_mask.any() else 0
        economic_value = return_spread / (1 + sideways_vol) if sideways_vol > 0 else return_spread
        
        # –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∑–æ–Ω
        zone_changes = np.sum(np.diff(aligned_predictions) != 0)
        zone_stability = 1 - (zone_changes / len(aligned_predictions))
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–æ–Ω
        zone_distribution = {
            'bull': np.sum(bull_mask),
            'bear': np.sum(bear_mask),
            'sideways': np.sum(sideways_mask)
        }
        
        return {
            'economic_value': economic_value,
            'return_spread': return_spread,
            'zone_stability': zone_stability,
            'zone_distribution': zone_distribution,
            'bull_returns': bull_returns,
            'bear_returns': bear_returns,
            'sideways_returns': sideways_returns
        }
    
    def optimize_parameters(self, data: pd.DataFrame, timeframes: List[str] = None) -> Dict:
        """
        –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã MZA –Ω–∞ –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            timeframes: –°–ø–∏—Å–æ–∫ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        """
        print("üöÄ –ù–ê–ß–ò–ù–ê–ï–ú –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Æ –ü–ê–†–ê–ú–ï–¢–†–û–í MZA")
        print("=" * 50)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        combinations = self.generate_parameter_combinations(max_combinations=500)
        
        best_score = -float('inf')
        best_params = None
        results = []
        
        print(f"üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º {len(combinations)} –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤...")
        
        for i, params in enumerate(combinations):
            if i % 50 == 0:
                print(f"üîÑ –ü—Ä–æ–≥—Ä–µ—Å—Å: {i}/{len(combinations)} ({i/len(combinations)*100:.1f}%)")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏—é
            result = self.test_parameter_combination(params, data)
            
            if result['success']:
                score = result['metrics']['economic_value']
                results.append(result)
                
                if score > best_score:
                    best_score = score
                    best_params = params
                    print(f"üéØ –ù–æ–≤—ã–π –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score:.6f}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.optimization_results = {
            'best_parameters': best_params,
            'best_score': best_score,
            'all_results': results,
            'total_tested': len(combinations),
            'successful_tests': len(results)
        }
        
        print(f"\n‚úÖ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê")
        print(f"üìä –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: {len(combinations)} –∫–æ–º–±–∏–Ω–∞—Ü–∏–π")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {len(results)}")
        print(f"üèÜ –õ—É—á—à–∏–π Economic Value: {best_score:.6f}")
        
        return self.optimization_results
    
    def export_to_pine_script(self, output_file: str = "optimized_mza_params.pine") -> str:
        """
        –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç Pine Script
        
        Args:
            output_file: –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
            
        Returns:
            –°—Ç—Ä–æ–∫–∞ —Å –∫–æ–¥–æ–º Pine Script
        """
        if not self.optimization_results:
            raise ValueError("–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é")
        
        best_params = self.optimization_results['best_parameters']
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–¥ Pine Script
        pine_code = f"""// –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã MZA –¥–ª—è TradingView
// –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö BTC
// –î–∞—Ç–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {pd.Timestamp.now().strftime('%d.%m.%Y %H:%M')}
// –õ—É—á—à–∏–π Economic Value: {self.optimization_results['best_score']:.6f}

//@version=5
indicator("Optimized MZA [BullByte]", overlay=true)

// ===== –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –ü–ê–†–ê–ú–ï–¢–†–´ =====

// Trend Indicators
adx_length = input.int({best_params.get('adx_length', 14)}, "ADX Length", minval=10, maxval=20)
adx_threshold = input.int({best_params.get('adx_threshold', 20)}, "ADX Threshold", minval=15, maxval=30)
fast_ma_length = input.int({best_params.get('fast_ma_length', 20)}, "Fast MA Length", minval=15, maxval=25)
slow_ma_length = input.int({best_params.get('slow_ma_length', 50)}, "Slow MA Length", minval=40, maxval=60)

// Momentum Indicators
rsi_length = input.int({best_params.get('rsi_length', 14)}, "RSI Length", minval=10, maxval=20)
rsi_overbought = input.int({best_params.get('rsi_overbought', 70)}, "RSI Overbought", minval=65, maxval=80)
rsi_oversold = input.int({best_params.get('rsi_oversold', 30)}, "RSI Oversold", minval=20, maxval=35)
stoch_length = input.int({best_params.get('stoch_length', 14)}, "Stochastic Length", minval=10, maxval=20)
macd_fast = input.int({best_params.get('macd_fast', 12)}, "MACD Fast", minval=8, maxval=16)
macd_slow = input.int({best_params.get('macd_slow', 26)}, "MACD Slow", minval=20, maxval=30)

// Price Action Indicators
bb_length = input.int({best_params.get('bb_length', 20)}, "Bollinger Bands Length", minval=15, maxval=25)
bb_std = input.float({best_params.get('bb_std', 2.0)}, "Bollinger Bands Std Dev", minval=1.5, maxval=3.0)
atr_length = input.int({best_params.get('atr_length', 14)}, "ATR Length", minval=10, maxval=20)

// Dynamic Weights
trend_weight_high_vol = input.float({best_params.get('trend_weight_high_vol', 0.5)}, "Trend Weight (High Vol)", minval=0.4, maxval=0.6)
momentum_weight_high_vol = input.float({best_params.get('momentum_weight_high_vol', 0.35)}, "Momentum Weight (High Vol)", minval=0.3, maxval=0.4)
price_action_weight_low_vol = input.float({best_params.get('price_action_weight_low_vol', 0.45)}, "Price Action Weight (Low Vol)", minval=0.4, maxval=0.6)

// ===== –û–°–¢–ê–õ–¨–ù–û–ô –ö–û–î MZA –û–°–¢–ê–ï–¢–°–Ø –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô =====
// –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—Å—Ç–∞–≤–ª–µ–Ω –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥ MZA —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
// –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤—ã—à–µ

// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:
// rsi_value = ta.rsi(close, rsi_length)
// adx_value = ta.adx(high, low, close, adx_length)
// bb_upper = ta.sma(close, bb_length) + bb_std * ta.stdev(close, bb_length)
// bb_lower = ta.sma(close, bb_length) - bb_std * ta.stdev(close, bb_length)

// ===== –†–ï–ó–£–õ–¨–¢–ê–¢–´ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò =====
// Economic Value: {self.optimization_results['best_score']:.6f}
// –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π: {self.optimization_results['total_tested']}
// –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {self.optimization_results['successful_tests']}
"""
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(pine_code)
        
        print(f"üìÑ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ {output_file}")
        return pine_code
    
    def create_optimization_report(self) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –æ—Ç—á–µ—Ç –æ–± –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        if not self.optimization_results:
            return "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–≤–æ–¥–∏–ª–∞—Å—å"
        
        report = f"""
# üìä –û–¢–ß–ï–¢ –û–ë –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò MZA –ü–ê–†–ê–ú–ï–¢–†–û–í

## üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:
- **–õ—É—á—à–∏–π Economic Value:** {self.optimization_results['best_score']:.6f}
- **–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π:** {self.optimization_results['total_tested']}
- **–£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤:** {self.optimization_results['successful_tests']}
- **–î–∞—Ç–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:** {pd.Timestamp.now().strftime('%d.%m.%Y %H:%M')}

## üèÜ –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:
"""
        
        for param, value in self.optimization_results['best_parameters'].items():
            report += f"- **{param}:** {value}\n"
        
        # –¢–æ–ø-5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if len(self.optimization_results['all_results']) >= 5:
            report += "\n## üìà –¢–æ–ø-5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:\n"
            sorted_results = sorted(
                self.optimization_results['all_results'], 
                key=lambda x: x['metrics']['economic_value'], 
                reverse=True
            )[:5]
            
            for i, result in enumerate(sorted_results, 1):
                ev = result['metrics']['economic_value']
                report += f"{i}. Economic Value: {ev:.6f}\n"
        
        return report


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    # –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä
    optimizer = MZAParameterOptimizer()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ BTC (–ø—Ä–∏–º–µ—Ä)
    # data = pd.read_csv('df_btc_1h.csv')
    
    # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    # results = optimizer.optimize_parameters(data)
    
    # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ Pine Script
    # pine_code = optimizer.export_to_pine_script()
    
    print("üéØ MZA Parameter Optimizer –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
