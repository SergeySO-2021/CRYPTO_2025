# üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –û–ü–¢–ò–ú–ò–ó–ê–¢–û–†–ê MZA
# ==================================================

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
current_dir = os.getcwd()
if 'indicator_optimization' not in current_dir:
    sys.path.append(os.path.join(current_dir, 'indicator_optimization', '01_mza_optimization'))
else:
    sys.path.append('.')

print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –û–ü–¢–ò–ú–ò–ó–ê–¢–û–†–ê MZA")
print("=" * 55)

try:
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏
    from data_loader import load_btc_data
    from mza_optimizer import MZAOptimizer
    from accurate_mza_classifier import AccurateMZAClassifier
    
    print("‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    print("\nüìä –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...")
    data = load_btc_data(['15m'])
    
    if data and '15m' in data:
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {len(data['15m'])} –∑–∞–ø–∏—Å–µ–π")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞
        print("\nüîß –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞...")
        optimizer = MZAOptimizer(
            population_size=5,      # –ú–∞–ª–µ–Ω—å–∫–∞—è –ø–æ–ø—É–ª—è—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∞
            max_generations=2,      # –ú–∞–ª–æ –ø–æ–∫–æ–ª–µ–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç–∞
            mutation_rate=0.15,
            crossover_rate=0.8,
            elite_size=2
        )
        
        print("‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω")
        print(f"üìä –†–∞–∑–º–µ—Ä –ø–æ–ø—É–ª—è—Ü–∏–∏: {optimizer.population_size}")
        print(f"üîÑ –ú–∞–∫—Å–∏–º—É–º –ø–æ–∫–æ–ª–µ–Ω–∏–π: {optimizer.max_generations}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–π –æ—Å–æ–±–∏
        print("\nüß¨ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–π –æ—Å–æ–±–∏...")
        individual = optimizer.create_random_individual()
        print(f"‚úÖ –°–ª—É—á–∞–π–Ω–∞—è –æ—Å–æ–±—å —Å–æ–∑–¥–∞–Ω–∞: {len(individual)} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        sample_params = dict(list(individual.items())[:5])
        print("üìã –ü—Ä–∏–º–µ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:")
        for param, value in sample_params.items():
            print(f"   {param}: {value}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º—É—Ç–∞—Ü–∏—é
        print("\nüîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –º—É—Ç–∞—Ü–∏—é...")
        mutated = optimizer.mutate(individual)
        print("‚úÖ –ú—É—Ç–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å—á–µ—Ç —Ñ–∏—Ç–Ω–µ—Å–∞
        print("\nüìä –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å—á–µ—Ç —Ñ–∏—Ç–Ω–µ—Å–∞...")
        test_data = data['15m'].head(100)  # –ú–∞–ª–µ–Ω—å–∫–∏–π –Ω–∞–±–æ—Ä –¥–ª—è —Ç–µ—Å—Ç–∞
        fitness = optimizer.calculate_fitness(individual, test_data)
        print(f"‚úÖ –§–∏—Ç–Ω–µ—Å —Ä–∞—Å—Å—á–∏—Ç–∞–Ω: {fitness:.6f}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫—Ä–æ—Å—Å–æ–≤–µ—Ä
        print("\nüîÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫—Ä–æ—Å—Å–æ–≤–µ—Ä...")
        parent1 = optimizer.create_random_individual()
        parent2 = optimizer.create_random_individual()
        child1, child2 = optimizer.crossover(parent1, parent2)
        print("‚úÖ –ö—Ä–æ—Å—Å–æ–≤–µ—Ä –≤—ã–ø–æ–ª–Ω–µ–Ω")
        
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
        
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    import traceback
    traceback.print_exc()
