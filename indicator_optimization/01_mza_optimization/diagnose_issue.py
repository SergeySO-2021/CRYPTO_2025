"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π MZA
"""

import sys
from pathlib import Path
import pandas as pd

print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú –° –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ï–ô MZA")
print("=" * 60)

# 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
print("\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ VectorizedMZAClassifier...")
try:
    project_root = Path(__file__).parent.parent.parent
    classifiers_path = project_root / 'compare_analyze_indicators' / 'classifiers'
    
    print(f"   –ö–æ—Ä–Ω–µ–≤–æ–π –∫–∞—Ç–∞–ª–æ–≥: {project_root}")
    print(f"   –ü—É—Ç—å –∫ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º: {classifiers_path}")
    
    if not classifiers_path.exists():
        print(f"   ‚ùå –ü—É—Ç—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        sys.exit(1)
    
    sys.path.insert(0, str(classifiers_path))
    
    from mza_classifier_vectorized import VectorizedMZAClassifier
    print("   ‚úÖ VectorizedMZAClassifier –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
    print("\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞...")
    test_classifier = VectorizedMZAClassifier()
    print("   ‚úÖ –≠–∫–∑–µ–º–ø–ª—è—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    print("\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏...")
    test_params = {
        'rsi_length': 14,
        'rsi_overbought': 70,
        'rsi_oversold': 30
    }
    
    test_classifier = VectorizedMZAClassifier(parameters=test_params)
    print("   ‚úÖ –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏")
    
    # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    print("\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
    csv_file = project_root / 'df_btc_1h.csv'
    
    if csv_file.exists():
        print(f"   ‚úÖ –§–∞–π–ª –Ω–∞–π–¥–µ–Ω: {csv_file}")
        df = pd.read_csv(csv_file)
        print(f"   üìä –ó–∞–ø–∏—Å–µ–π: {len(df)}")
        print(f"   üìä –ö–æ–ª–æ–Ω–∫–∏: {list(df.columns)}")
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        if 'timestamps' in df.columns:
            df['timestamps'] = pd.to_datetime(df['timestamps'])
            df.set_index('timestamps', inplace=True)
        
        # –¢–µ—Å—Ç –Ω–∞ –Ω–µ–±–æ–ª—å—à–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –¥–∞–Ω–Ω—ã—Ö
        print("\n5Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –Ω–∞ 100 –∑–∞–ø–∏—Å—è—Ö...")
        data_sample = df.tail(100)[['open', 'high', 'low', 'close']].copy()
        
        try:
            predictions = test_classifier.fit_predict(data_sample)
            print(f"   ‚úÖ –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            print(f"   üìä –ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: {len(predictions)}")
            print(f"   üìä –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: {set(predictions)}")
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
            import traceback
            traceback.print_exc()
    else:
        print(f"   ‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {csv_file}")
    
    print("\n‚úÖ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
    
except ImportError as e:
    print(f"   ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    import traceback
    traceback.print_exc()
except Exception as e:
    print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    import traceback
    traceback.print_exc()

print("\nüí° –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ, –ø—Ä–æ–±–ª–µ–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤:")
print("   1. –ü–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
print("   2. –§–æ—Ä–º–∞—Ç–µ –¥–∞–Ω–Ω—ã—Ö")
print("   3. –õ–æ–≥–∏–∫–µ —Ä–∞—Å—á–µ—Ç–∞ –º–µ—Ç—Ä–∏–∫")

