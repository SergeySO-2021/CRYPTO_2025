#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö BTC —Å Volume
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
"""

import pandas as pd
import requests
import time
from datetime import datetime, timedelta
import os

class BTCDataDownloader:
    """–ö–ª–∞—Å—Å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö BTC —Å Volume"""
    
    def __init__(self):
        self.data_dir = "../../"  # –ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞
        
    def download_from_binance(self, symbol="BTCUSDT", interval="15m", limit=1000):
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å Binance API
        """
        try:
            url = f"https://api.binance.com/api/v3/klines"
            params = {
                'symbol': symbol,
                'interval': interval,
                'limit': limit
            }
            
            print(f"üìä –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ {symbol} —Å Binance...")
            response = requests.get(url, params=params)
            response.raise_for_status()
            
            data = response.json()
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ DataFrame
            df = pd.DataFrame(data, columns=[
                'timestamp', 'open', 'high', 'low', 'close', 'volume',
                'close_time', 'quote_asset_volume', 'number_of_trades',
                'taker_buy_base_asset_volume', 'taker_buy_quote_asset_volume', 'ignore'
            ])
            
            # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
            df = df[['timestamp', 'open', 'high', 'low', 'close', 'volume']]
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
            df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
            for col in ['open', 'high', 'low', 'close', 'volume']:
                df[col] = pd.to_numeric(df[col])
            
            # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏
            df.columns = ['timestamps', 'open', 'high', 'low', 'close', 'volume']
            
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π")
            print(f"üìÖ –ü–µ—Ä–∏–æ–¥: {df['timestamps'].min()} - {df['timestamps'].max()}")
            print(f"üìä Volume: {df['volume'].min():.2f} - {df['volume'].max():.2f}")
            
            return df
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å Binance: {e}")
            return None
    
    def download_from_yahoo(self, symbol="BTC-USD", period="1y", interval="15m"):
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å Yahoo Finance (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
        """
        try:
            import yfinance as yf
            
            print(f"üìä –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ {symbol} —Å Yahoo Finance...")
            
            ticker = yf.Ticker(symbol)
            df = ticker.history(period=period, interval=interval)
            
            if df.empty:
                print("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return None
            
            # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏
            df.reset_index(inplace=True)
            df.columns = ['timestamps', 'open', 'high', 'low', 'close', 'volume', 'dividends', 'stock_splits']
            df = df[['timestamps', 'open', 'high', 'low', 'close', 'volume']]
            
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π")
            print(f"üìÖ –ü–µ—Ä–∏–æ–¥: {df['timestamps'].min()} - {df['timestamps'].max()}")
            print(f"üìä Volume: {df['volume'].min():.2f} - {df['volume'].max():.2f}")
            
            return df
            
        except ImportError:
            print("‚ùå yfinance –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install yfinance")
            return None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å Yahoo: {e}")
            return None
    
    def save_data(self, df, timeframe):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ CSV"""
        if df is None or df.empty:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            return False
        
        filename = f"{self.data_dir}df_btc_{timeframe}_with_volume.csv"
        
        try:
            df.to_csv(filename, index=False)
            print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            return False
    
    def download_all_timeframes(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å–µ—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤"""
        timeframes = {
            '15m': {'interval': '15m', 'limit': 2000},
            '30m': {'interval': '30m', 'limit': 2000},
            '1h': {'interval': '1h', 'limit': 2000},
            '4h': {'interval': '4h', 'limit': 2000},
            '1d': {'interval': '1d', 'limit': 1000}
        }
        
        results = {}
        
        for tf, params in timeframes.items():
            print(f"\nüîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è {tf}...")
            
            # –ü—Ä–æ–±—É–µ–º Binance
            df = self.download_from_binance(**params)
            
            if df is not None:
                if self.save_data(df, tf):
                    results[tf] = True
                else:
                    results[tf] = False
            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {tf}")
                results[tf] = False
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            time.sleep(1)
        
        return results

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–ê–ì–†–£–ó–ö–ê –†–ï–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–• BTC –° VOLUME")
    print("=" * 50)
    
    downloader = BTCDataDownloader()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
    results = downloader.download_all_timeframes()
    
    print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ó–ê–ì–†–£–ó–ö–ò:")
    print("=" * 30)
    
    for tf, success in results.items():
        status = "‚úÖ" if success else "‚ùå"
        print(f"{status} {tf}: {'–£—Å–ø–µ—à–Ω–æ' if success else '–û—à–∏–±–∫–∞'}")
    
    successful = sum(results.values())
    total = len(results)
    
    print(f"\nüéØ –ò–¢–û–ì–û: {successful}/{total} —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–æ")
    
    if successful > 0:
        print("\nüí° –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å Volume!")
        print("üìù –û–±–Ω–æ–≤–∏—Ç–µ –ø—É—Ç–∏ –≤ test_complete_mza_notebook.ipynb")
    else:
        print("\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã.")

if __name__ == "__main__":
    main()
