"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ MZA —Å –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º
–û—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞
"""

import pandas as pd
import numpy as np
import sys
import os
from typing import Dict, List, Tuple
import warnings
warnings.filterwarnings('ignore')

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
from accurate_mza_classifier import AccurateMZAClassifier
from complete_mza_optimizer import CompleteMZAOptimizer

def load_test_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ BTC"""
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ CSV —Ñ–∞–π–ª–æ–≤
        data_files = {
            '15m': 'df_btc_15m.csv',
            '30m': 'df_btc_30m.csv', 
            '1h': 'df_btc_1h.csv',
            '4h': 'df_btc_4h.csv',
            '1d': 'df_btc_1d.csv'
        }
        
        data = {}
        base_path = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
        
        for tf, filename in data_files.items():
            filepath = os.path.join(base_path, filename)
            if os.path.exists(filepath):
                df = pd.read_csv(filepath)
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
                required_cols = ['open', 'high', 'low', 'close']
                if all(col in df.columns for col in required_cols):
                    # –ï—Å–ª–∏ –Ω–µ—Ç –∫–æ–ª–æ–Ω–∫–∏ volume, —Å–æ–∑–¥–∞–µ–º —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫—É—é
                    if 'volume' not in df.columns:
                        print(f"   ‚ö†Ô∏è –ö–æ–ª–æ–Ω–∫–∞ 'volume' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫—É—é")
                        # –°–æ–∑–¥–∞–µ–º volume –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Ü–µ–Ω –∏ —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏
                        price_range = df['high'] - df['low']
                        avg_price = df['close'].mean()
                        # –û–±—ä–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª–µ–Ω –¥–∏–∞–ø–∞–∑–æ–Ω—É —Ü–µ–Ω –∏ —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω–µ
                        df['volume'] = (price_range * avg_price * np.random.uniform(0.5, 2.0, len(df))).astype(int)
                    
                    data[tf] = df
                    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ {tf}: {len(df):,} –∑–∞–ø–∏—Å–µ–π")
                else:
                    print(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ –≤ {filename}")
                    print(f"   –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {list(df.columns)}")
                    print(f"   –¢—Ä–µ–±—É–µ–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {required_cols}")
            else:
                print(f"‚ùå –§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        return data
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return {}

def test_basic_classifier():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ë–ê–ó–û–í–û–ô –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–ò –ö–õ–ê–°–°–ò–§–ò–ö–ê–¢–û–†–ê")
    print("=" * 70)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    classifier = AccurateMZAClassifier({})
    
    print(f"‚úÖ –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω")
    print(f"üìä –ü–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {len(classifier.params)}")
    print(f"üîß –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {list(classifier.params.keys())[:5]}...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_data = pd.DataFrame({
        'open': [100, 101, 102, 103, 104, 105, 106, 107, 108, 109],
        'high': [101, 102, 103, 104, 105, 106, 107, 108, 109, 110],
        'low': [99, 100, 101, 102, 103, 104, 105, 106, 107, 108],
        'close': [100.5, 101.5, 102.5, 103.5, 104.5, 105.5, 106.5, 107.5, 108.5, 109.5],
        'volume': [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900]
    })
    
    print(f"\nüìä –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã: {len(test_data)} –∑–∞–ø–∏—Å–µ–π")
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        predictions = classifier.predict(test_data)
        
        print(f"‚úÖ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã!")
        print(f"   üìä –†–∞–∑–º–µ—Ä –º–∞—Å—Å–∏–≤–∞: {len(predictions)}")
        print(f"   üéØ –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: {np.unique(predictions)}")
        print(f"   üìà –ë—ã—á—å–∏ –∑–æ–Ω—ã: {np.sum(predictions == 1)}")
        print(f"   üìâ –ú–µ–¥–≤–µ–∂—å–∏ –∑–æ–Ω—ã: {np.sum(predictions == -1)}")
        print(f"   ‚û°Ô∏è –ë–æ–∫–æ–≤—ã–µ –∑–æ–Ω—ã: {np.sum(predictions == 0)}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_optimizer_basic():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞"""
    print("\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ë–ê–ó–û–í–û–ô –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–ò –û–ü–¢–ò–ú–ò–ó–ê–¢–û–†–ê")
    print("=" * 70)
    
    # –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä
    optimizer = CompleteMZAOptimizer(
        population_size=5,
        max_generations=3,
        mutation_rate=0.1,
        crossover_rate=0.8,
        elite_size=1,
        cv_folds=2,
        regularization_strength=0.01
    )
    
    print(f"‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω")
    print(f"üìä –ü–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {len(optimizer.param_ranges)}")
    print(f"üß¨ –†–∞–∑–º–µ—Ä –ø–æ–ø—É–ª—è—Ü–∏–∏: {optimizer.population_size}")
    print(f"üîÑ –ü–æ–∫–æ–ª–µ–Ω–∏–π: {optimizer.max_generations}")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_data = pd.DataFrame({
        'open': np.random.uniform(100, 110, 100),
        'high': np.random.uniform(101, 111, 100),
        'low': np.random.uniform(99, 109, 100),
        'close': np.random.uniform(100, 110, 100),
        'volume': np.random.uniform(1000, 2000, 100)
    })
    
    print(f"\nüìä –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã: {len(test_data)} –∑–∞–ø–∏—Å–µ–π")
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Å–æ–±–∏
        individual = optimizer.create_random_individual()
        print(f"‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –æ—Å–æ–±—å —Å–æ–∑–¥–∞–Ω–∞ —Å {len(individual)} –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ü–µ–Ω–∫—É –ø—Ä–∏–≥–æ–¥–Ω–æ—Å—Ç–∏
        fitness = optimizer.evaluate_fitness(individual, test_data)
        print(f"üìä –û—Ü–µ–Ω–∫–∞ –ø—Ä–∏–≥–æ–¥–Ω–æ—Å—Ç–∏: {fitness:.6f}")
        
        if fitness > -1000:
            print("‚úÖ –§—É–Ω–∫—Ü–∏—è –æ—Ü–µ–Ω–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        else:
            print("‚ùå –§—É–Ω–∫—Ü–∏—è –æ—Ü–µ–Ω–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—à–∏–±–∫—É")
            return False
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏—é
        cv_results = optimizer.cross_validate_fitness(individual, test_data)
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏–∏:")
        print(f"   üèãÔ∏è Train Score: {cv_results['train_score']:.6f}")
        print(f"   üß™ Test Score: {cv_results['test_score']:.6f}")
        print(f"   üìà –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å: {cv_results['stability']:.6f}")
        print(f"   üõ°Ô∏è –†–∏—Å–∫ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è: {cv_results['overfitting_risk']:.6f}")
        
        if cv_results['train_score'] > -1000 and cv_results['test_score'] > -1000:
            print("‚úÖ –ö—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
            return True
        else:
            print("‚ùå –ö—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—à–∏–±–∫–∏")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_mini_optimization():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –º–∏–Ω–∏-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é"""
    print("\nüöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–ò–ù–ò-–û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –¥–ª—è –º–∏–Ω–∏-—Ç–µ—Å—Ç–∞
    optimizer = CompleteMZAOptimizer(
        population_size=10,
        max_generations=5,
        mutation_rate=0.1,
        crossover_rate=0.8,
        elite_size=2,
        cv_folds=2,
        regularization_strength=0.01
    )
    
    # –°–æ–∑–¥–∞–µ–º –±–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    np.random.seed(42)  # –î–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏
    n_points = 500
    
    # –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ–Ω–¥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    trend = np.linspace(100, 120, n_points)
    noise = np.random.normal(0, 2, n_points)
    prices = trend + noise
    
    test_data = pd.DataFrame({
        'open': prices,
        'high': prices + np.random.uniform(0, 2, n_points),
        'low': prices - np.random.uniform(0, 2, n_points),
        'close': prices + np.random.normal(0, 0.5, n_points),
        'volume': np.random.uniform(1000, 5000, n_points)
    })
    
    print(f"üìä –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã: {len(test_data)} –∑–∞–ø–∏—Å–µ–π")
    print(f"üí∞ –î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω: {test_data['close'].min():.2f} - {test_data['close'].max():.2f}")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–Ω–∏-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
        print("üß¨ –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–Ω–∏-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é...")
        results = optimizer.optimize(test_data, verbose=True)
        
        print(f"\n‚úÖ –ú–ò–ù–ò-–û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê")
        print(f"üèÜ –õ—É—á—à–∏–π Economic Value: {results['best_score']:.6f}")
        print(f"üìä –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ –æ—Ü–µ–Ω–æ–∫: {results['total_evaluations']}")
        print(f"üéØ –ü–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {results['param_count']}")
        
        if results['best_score'] > -1000:
            print("üéâ –ú–ò–ù–ò-–û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –£–°–ü–ï–®–ù–ê!")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª—É—á—à–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            best_params = results['best_parameters']
            print(f"\nüîß –õ–£–ß–®–ò–ï –ü–ê–†–ê–ú–ï–¢–†–´:")
            print("-" * 25)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            key_params = ['fastMALength', 'slowMALength', 'rsiLength', 'adxThreshold', 
                         'trendWeightBase', 'momentumWeightBase', 'priceActionWeightBase']
            for param in key_params:
                if param in best_params:
                    print(f"   {param}: {best_params[param]}")
            
            return True
        else:
            print("‚ùå –ú–∏–Ω–∏-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–µ –¥–∞–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–Ω–∏-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_real_data_optimization():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö BTC"""
    print("\nüìä –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–ê –†–ï–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–• BTC")
    print("=" * 50)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    data = load_test_data()
    
    if not data:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
        return False
    
    # –í—ã–±–∏—Ä–∞–µ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    test_timeframe = '15m'
    if test_timeframe not in data:
        test_timeframe = list(data.keys())[0]
    
    print(f"üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ: {test_timeframe}")
    print(f"üìà –ó–∞–ø–∏—Å–µ–π: {len(data[test_timeframe]):,}")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2000 –∑–∞–ø–∏—Å–µ–π –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    test_data = data[test_timeframe].tail(2000)
    
    # –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä
    optimizer = CompleteMZAOptimizer(
        population_size=15,
        max_generations=10,
        mutation_rate=0.1,
        crossover_rate=0.8,
        elite_size=3,
        cv_folds=3,
        regularization_strength=0.01
    )
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
        print("üß¨ –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        results = optimizer.optimize(test_data, verbose=True)
        
        print(f"\n‚úÖ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –ù–ê –†–ï–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–• –ó–ê–í–ï–†–®–ï–ù–ê")
        print(f"üèÜ –õ—É—á—à–∏–π Economic Value: {results['best_score']:.6f}")
        print(f"üìä –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ –æ—Ü–µ–Ω–æ–∫: {results['total_evaluations']}")
        print(f"üéØ –ü–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {results['param_count']}")
        print(f"üõ°Ô∏è –†–∏—Å–∫ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è: {results['overfitting_analysis']['overfitting_risk']:.3f}")
        print(f"üìà –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å: {results['overfitting_analysis']['stability']:.3f}")
        
        if results['best_score'] > -1000:
            print("üéâ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –ù–ê –†–ï–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–• –£–°–ü–ï–®–ù–ê!")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª—É—á—à–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            best_params = results['best_parameters']
            print(f"\nüîß –õ–£–ß–®–ò–ï –ü–ê–†–ê–ú–ï–¢–†–´ –î–õ–Ø {test_timeframe}:")
            print("-" * 40)
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            categories = {
                'Trend': ['adxLength', 'adxThreshold', 'fastMALength', 'slowMALength'],
                'Momentum': ['rsiLength', 'stochKLength', 'macdFast', 'macdSlow', 'macdSignal'],
                'Price Action': ['hhllRange', 'haDojiRange', 'candleRangeLength'],
                'Market Activity': ['bbLength', 'bbMultiplier', 'atrLength', 'kcLength', 'kcMultiplier', 'volumeMALength'],
                'Weights': ['trendWeightBase', 'momentumWeightBase', 'priceActionWeightBase'],
                'Stability': ['useSmoothing', 'useHysteresis']
            }
            
            for category, params in categories.items():
                print(f"\nüìä {category}:")
                for param in params:
                    if param in best_params:
                        print(f"   {param}: {best_params[param]}")
            
            # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ Pine Script
            try:
                pine_file = f"optimized_mza_{test_timeframe}.pine"
                pine_code = optimizer.export_to_pine_script(pine_file)
                print(f"\nüìÑ –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ {pine_file}")
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Pine Script: {e}")
            
            return True
        else:
            print("‚ùå –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ –¥–∞–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–õ–ù–û–ô –†–ï–ê–õ–ò–ó–ê–¶–ò–ò MZA –° –ì–ï–ù–ï–¢–ò–ß–ï–°–ö–ò–ú –ê–õ–ì–û–†–ò–¢–ú–û–ú")
    print("=" * 80)
    print("üìÖ –î–∞—Ç–∞: 26.10.2025")
    print("üîß –í–µ—Ä—Å–∏—è: 1.0")
    print("=" * 80)
    
    # –°—á–µ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    successful_tests = 0
    total_tests = 4
    
    # –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
    if test_basic_classifier():
        successful_tests += 1
        print("‚úÖ –¢–µ—Å—Ç 1/4 –ø—Ä–æ–π–¥–µ–Ω: –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞")
    else:
        print("‚ùå –¢–µ—Å—Ç 1/4 –ø—Ä–æ–≤–∞–ª–µ–Ω: –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞")
    
    # –¢–µ—Å—Ç 2: –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞
    if test_optimizer_basic():
        successful_tests += 1
        print("‚úÖ –¢–µ—Å—Ç 2/4 –ø—Ä–æ–π–¥–µ–Ω: –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞")
    else:
        print("‚ùå –¢–µ—Å—Ç 2/4 –ø—Ä–æ–≤–∞–ª–µ–Ω: –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞")
    
    # –¢–µ—Å—Ç 3: –ú–∏–Ω–∏-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
    if test_mini_optimization():
        successful_tests += 1
        print("‚úÖ –¢–µ—Å—Ç 3/4 –ø—Ä–æ–π–¥–µ–Ω: –ú–∏–Ω–∏-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è")
    else:
        print("‚ùå –¢–µ—Å—Ç 3/4 –ø—Ä–æ–≤–∞–ª–µ–Ω: –ú–∏–Ω–∏-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è")
    
    # –¢–µ—Å—Ç 4: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if test_real_data_optimization():
        successful_tests += 1
        print("‚úÖ –¢–µ—Å—Ç 4/4 –ø—Ä–æ–π–¥–µ–Ω: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    else:
        print("‚ùå –¢–µ—Å—Ç 4/4 –ø—Ä–æ–≤–∞–ª–µ–Ω: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print(f"\nüéØ –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("=" * 50)
    print(f"üìä –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {successful_tests}/{total_tests}")
    print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {successful_tests/total_tests*100:.1f}%")
    
    if successful_tests == total_tests:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –ü–æ–ª–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è MZA –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        print("‚úÖ –ì–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("‚úÖ –ö—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç")
        print("‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–∞")
    elif successful_tests >= total_tests * 0.75:
        print("‚ö†Ô∏è –ë–û–õ–¨–®–ò–ù–°–¢–í–û –¢–ï–°–¢–û–í –ü–†–û–ô–î–ï–ù–û")
        print("‚úÖ –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
    else:
        print("‚ùå –ú–ù–û–ì–ò–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´")
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–µ—Ä—å–µ–∑–Ω–∞—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞")
        print("‚ùå –ù–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ")
    
    print(f"\nüìö –§–ê–ô–õ–´ –ü–†–û–ï–ö–¢–ê:")
    print("-" * 20)
    print("üìÑ accurate_mza_classifier.py - –ü–æ–ª–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è MZA")
    print("üìÑ complete_mza_optimizer.py - –ì–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º")
    print("üìÑ test_complete_mza.py - –≠—Ç–æ—Ç —Ñ–∞–π–ª —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    print("üìÑ COMPLETE_MZA_IMPLEMENTATION_REPORT.md - –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è")
    
    print(f"\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("-" * 20)
    if successful_tests == total_tests:
        print("‚úÖ –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –ø–æ–ª–Ω—É—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é")
        print("‚úÖ –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ")
        print("‚úÖ –ú–æ–∂–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ Pine Script")
    else:
        print("‚ö†Ô∏è –ò—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º")
        print("‚ö†Ô∏è –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        print("‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å TradingView")

if __name__ == "__main__":
    main()
