# üöÄ –ú–û–î–£–õ–¨ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò MZA –° –ì–ï–ù–ï–¢–ò–ß–ï–°–ö–ò–ú –ê–õ–ì–û–†–ò–¢–ú–û–ú
# ==================================================

import pandas as pd
import numpy as np
import random
from typing import Dict, List, Tuple, Optional
from data_loader import DataManager
import warnings
warnings.filterwarnings('ignore')

class MZAOptimizer:
    """
    –û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä MZA —Å –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º
    """
    
    def __init__(self, 
                 population_size: int = 30,
                 max_generations: int = 50,
                 mutation_rate: float = 0.15,
                 crossover_rate: float = 0.8,
                 elite_size: int = 5,
                 cv_folds: int = 3,
                 regularization: float = 0.01):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞
        
        Args:
            population_size: –†–∞–∑–º–µ—Ä –ø–æ–ø—É–ª—è—Ü–∏–∏
            max_generations: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫–æ–ª–µ–Ω–∏–π
            mutation_rate: –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –º—É—Ç–∞—Ü–∏–∏
            crossover_rate: –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∫—Ä–æ—Å—Å–æ–≤–µ—Ä–∞
            elite_size: –†–∞–∑–º–µ—Ä —ç–ª–∏—Ç—ã
            cv_folds: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ–ª–¥–æ–≤ –¥–ª—è –∫—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏–∏
            regularization: –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏–∏
        """
        self.population_size = population_size
        self.max_generations = max_generations
        self.mutation_rate = mutation_rate
        self.crossover_rate = crossover_rate
        self.elite_size = elite_size
        self.cv_folds = cv_folds
        self.regularization = regularization
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã MZA –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        self.param_ranges = {
            # Trend Indicators (4 –ø–∞—Ä–∞–º–µ—Ç—Ä–∞)
            'adxLength': (10, 20, 1),
            'adxThreshold': (15, 30, 1),
            'fastMALength': (15, 25, 1),
            'slowMALength': (40, 60, 1),
            
            # Momentum Indicators (5 –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)
            'rsiLength': (10, 20, 1),
            'stochKLength': (10, 20, 1),
            'macdFast': (8, 16, 1),
            'macdSlow': (20, 30, 1),
            'macdSignal': (7, 12, 1),
            
            # Price Action Indicators (3 –ø–∞—Ä–∞–º–µ—Ç—Ä–∞)
            'hhllRange': (15, 30, 1),
            'haDojiRange': (3, 10, 1),
            'candleRangeLength': (5, 15, 1),
            
            # Market Activity Indicators (6 –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)
            'bbLength': (15, 25, 1),
            'bbMultiplier': (1.5, 3.0, 0.1),
            'atrLength': (10, 20, 1),
            'kcLength': (15, 25, 1),
            'kcMultiplier': (1.0, 2.5, 0.1),
            'volumeMALength': (15, 25, 1),
            
            # Base Weights (3 –ø–∞—Ä–∞–º–µ—Ç—Ä–∞)
            'trendWeightBase': (30, 50, 1),
            'momentumWeightBase': (20, 40, 1),
            'priceActionWeightBase': (20, 40, 1),
            
            # Stability Controls (2 –ø–∞—Ä–∞–º–µ—Ç—Ä–∞)
            'useSmoothing': [True, False],
            'useHysteresis': [True, False]
        }
        
        self.best_score = -float('inf')
        self.best_parameters = None
        self.generation_history = []
        
    def create_random_individual(self) -> Dict:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–π –æ—Å–æ–±–∏ (–Ω–∞–±–æ—Ä–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        """
        individual = {}
        
        for param, param_range in self.param_ranges.items():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
            if isinstance(param_range, list):
                # –ë—É–ª–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –∫–∞–∫ —Å–ø–∏—Å–æ–∫
                individual[param] = random.choice(param_range)
            else:
                # –ß–∏—Å–ª–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –∫–∞–∫ –∫–æ—Ä—Ç–µ–∂ (min, max, step)
                min_val, max_val, step = param_range
                if isinstance(min_val, int):
                    individual[param] = random.randint(min_val, max_val)
                else:
                    individual[param] = round(random.uniform(min_val, max_val), 1)
        
        return individual
    
    def calculate_fitness(self, individual: Dict, data: pd.DataFrame) -> float:
        """
        –†–∞—Å—á–µ—Ç —Ñ–∏—Ç–Ω–µ—Å–∞ –æ—Å–æ–±–∏
        
        Args:
            individual: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Å–æ–±–∏
            data: –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            
        Returns:
            –ó–Ω–∞—á–µ–Ω–∏–µ —Ñ–∏—Ç–Ω–µ—Å–∞
        """
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä
            from accurate_mza_classifier import AccurateMZAClassifier
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä
            classifier = AccurateMZAClassifier(individual)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            predictions = classifier.predict(data)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º Economic Value
            returns = data['close'].pct_change().dropna()
            
            # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
            min_length = min(len(returns), len(predictions))
            returns = returns.iloc[:min_length]
            predictions = predictions[:min_length]
            
            # –†–∞–∑–¥–µ–ª—è–µ–º –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –ø–æ –∑–æ–Ω–∞–º
            bull_returns = returns[predictions == 1]
            bear_returns = returns[predictions == -1]
            sideways_returns = returns[predictions == 0]
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
            if len(bull_returns) > 0 and len(bear_returns) > 0:
                return_spread = abs(bull_returns.mean() - bear_returns.mean())
            else:
                return_spread = 0
            
            if len(sideways_returns) > 0:
                sideways_volatility = sideways_returns.std()
            else:
                sideways_volatility = 1
            
            # –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∑–æ–Ω
            zone_changes = np.sum(np.diff(predictions) != 0)
            zone_stability = 1 - (zone_changes / len(predictions)) if len(predictions) > 1 else 1
            
            # –ö–æ–º–ø–æ–∑–∏—Ç–Ω—ã–π —Å–∫–æ—Ä
            fitness = (return_spread * 0.4 + zone_stability * 0.6) / (1 + sideways_volatility)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏—é
            fitness = fitness - self.regularization * len([p for p in individual.values() if p > 50])
            
            return max(fitness, 0)
            
        except Exception as e:
            return -1000.0
    
    def crossover(self, parent1: Dict, parent2: Dict) -> Tuple[Dict, Dict]:
        """
        –ö—Ä–æ—Å—Å–æ–≤–µ—Ä –¥–≤—É—Ö —Ä–æ–¥–∏—Ç–µ–ª–µ–π
        
        Args:
            parent1: –ü–µ—Ä–≤—ã–π —Ä–æ–¥–∏—Ç–µ–ª—å
            parent2: –í—Ç–æ—Ä–æ–π —Ä–æ–¥–∏—Ç–µ–ª—å
            
        Returns:
            –î–≤–∞ –ø–æ—Ç–æ–º–∫–∞
        """
        child1 = parent1.copy()
        child2 = parent2.copy()
        
        for param in self.param_ranges.keys():
            if random.random() < 0.5:
                child1[param] = parent2[param]
                child2[param] = parent1[param]
        
        return child1, child2
    
    def mutate(self, individual: Dict) -> Dict:
        """
        –ú—É—Ç–∞—Ü–∏—è –æ—Å–æ–±–∏
        
        Args:
            individual: –û—Å–æ–±–∞—è –¥–ª—è –º—É—Ç–∞—Ü–∏–∏
            
        Returns:
            –ú—É—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—Å–æ–±—å
        """
        mutated = individual.copy()
        
        for param, param_range in self.param_ranges.items():
            if random.random() < self.mutation_rate:
                if isinstance(param_range, list):
                    # –ë—É–ª–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                    mutated[param] = random.choice(param_range)
                else:
                    # –ß–∏—Å–ª–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                    min_val, max_val, step = param_range
                    if isinstance(min_val, int):
                        mutated[param] = random.randint(min_val, max_val)
                    else:
                        mutated[param] = round(random.uniform(min_val, max_val), 1)
        
        return mutated
    
    def select_parents(self, population: List[Dict], fitness_scores: List[float]) -> List[Dict]:
        """
        –°–µ–ª–µ–∫—Ü–∏—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è
        
        Args:
            population: –ü–æ–ø—É–ª—è—Ü–∏—è
            fitness_scores: –û—Ü–µ–Ω–∫–∏ —Ñ–∏—Ç–Ω–µ—Å–∞
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Ä–æ–¥–∏—Ç–µ–ª–µ–π
        """
        # –¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Å–µ–ª–µ–∫—Ü–∏—è
        parents = []
        
        for _ in range(self.population_size):
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã—Ö –æ—Å–æ–±–µ–π –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞
            tournament_size = 3
            tournament_indices = random.sample(range(len(population)), tournament_size)
            tournament_fitness = [fitness_scores[i] for i in tournament_indices]
            
            # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–µ–≥–æ –∏–∑ —Ç—É—Ä–Ω–∏—Ä–∞
            winner_index = tournament_indices[np.argmax(tournament_fitness)]
            parents.append(population[winner_index])
        
        return parents
    
    def optimize(self, data: pd.DataFrame, verbose: bool = True) -> Dict:
        """
        –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        
        Args:
            data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            verbose: –í—ã–≤–æ–¥–∏—Ç—å –ª–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        """
        if verbose:
            print("üöÄ –ó–ê–ü–£–°–ö –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò MZA")
            print("=" * 50)
            print(f"üìä –†–∞–∑–º–µ—Ä –ø–æ–ø—É–ª—è—Ü–∏–∏: {self.population_size}")
            print(f"üîÑ –ú–∞–∫—Å–∏–º—É–º –ø–æ–∫–æ–ª–µ–Ω–∏–π: {self.max_generations}")
            print(f"üß¨ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –º—É—Ç–∞—Ü–∏–∏: {self.mutation_rate}")
            print(f"üîÄ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∫—Ä–æ—Å—Å–æ–≤–µ—Ä–∞: {self.crossover_rate}")
            print(f"üëë –†–∞–∑–º–µ—Ä —ç–ª–∏—Ç—ã: {self.elite_size}")
            print(f"üìä –ö—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏—è: {self.cv_folds} —Ñ–æ–ª–¥–æ–≤")
            print(f"üõ°Ô∏è –†–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏—è: {self.regularization}")
            print(f"üéØ –ü–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {len(self.param_ranges)}")
            print("=" * 50)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ø—É–ª—è—Ü–∏–∏
        population = [self.create_random_individual() for _ in range(self.population_size)]
        
        for generation in range(self.max_generations):
            # –û—Ü–µ–Ω–∫–∞ —Ñ–∏—Ç–Ω–µ—Å–∞
            fitness_scores = [self.calculate_fitness(ind, data) for ind in population]
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            best_idx = np.argmax(fitness_scores)
            if fitness_scores[best_idx] > self.best_score:
                self.best_score = fitness_scores[best_idx]
                self.best_parameters = population[best_idx].copy()
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
            self.generation_history.append({
                'generation': generation,
                'best_fitness': max(fitness_scores),
                'avg_fitness': np.mean(fitness_scores),
                'best_individual': population[best_idx].copy()
            })
            
            if verbose and generation % 10 == 0:
                print(f"üîÑ –ü–æ–∫–æ–ª–µ–Ω–∏–µ {generation:3d}: –õ—É—á—à–∏–π = {max(fitness_scores):.6f}, "
                      f"–°—Ä–µ–¥–Ω–∏–π = {np.mean(fitness_scores):.6f}")
            
            # –°–µ–ª–µ–∫—Ü–∏—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π
            parents = self.select_parents(population, fitness_scores)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è
            new_population = []
            
            # –≠–ª–∏—Ç–∏–∑–º - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª—É—á—à–∏—Ö
            elite_indices = np.argsort(fitness_scores)[-self.elite_size:]
            for idx in elite_indices:
                new_population.append(population[idx].copy())
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Ç–æ–º–∫–æ–≤
            while len(new_population) < self.population_size:
                parent1, parent2 = random.sample(parents, 2)
                
                if random.random() < self.crossover_rate:
                    child1, child2 = self.crossover(parent1, parent2)
                else:
                    child1, child2 = parent1.copy(), parent2.copy()
                
                child1 = self.mutate(child1)
                child2 = self.mutate(child2)
                
                new_population.extend([child1, child2])
            
            # –û–±—Ä–µ–∑–∞–µ–º –¥–æ –Ω—É–∂–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
            population = new_population[:self.population_size]
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
        final_fitness_scores = [self.calculate_fitness(ind, data) for ind in population]
        best_idx = np.argmax(final_fitness_scores)
        
        if final_fitness_scores[best_idx] > self.best_score:
            self.best_score = final_fitness_scores[best_idx]
            self.best_parameters = population[best_idx].copy()
        
        if verbose:
            print(f"\nüéâ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
            print(f"üèÜ –õ—É—á—à–∏–π Economic Value: {self.best_score:.6f}")
            print(f"üìä –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–∫–æ–ª–µ–Ω–∏–π: {self.max_generations}")
            print(f"üß¨ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫: {self.population_size * self.max_generations}")
        
        return {
            'best_score': self.best_score,
            'best_parameters': self.best_parameters,
            'generations': self.max_generations,
            'total_evaluations': self.population_size * self.max_generations,
            'generation_history': self.generation_history
        }
    
    def get_parameter_summary(self, parameters: Dict) -> str:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
        
        Args:
            parameters: –°–ª–æ–≤–∞—Ä—å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            
        Returns:
            –°—Ç—Ä–æ–∫–∞ —Å–æ —Å–≤–æ–¥–∫–æ–π
        """
        summary = "üîß –õ–£–ß–®–ò–ï –ü–ê–†–ê–ú–ï–¢–†–´ MZA:\n"
        summary += "=" * 30 + "\n"
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        categories = {
            'Trend Indicators': ['adxLength', 'adxThreshold', 'fastMALength', 'slowMALength'],
            'Momentum Indicators': ['rsiLength', 'stochKLength', 'macdFast', 'macdSlow', 'macdSignal'],
            'Price Action Indicators': ['hhllRange', 'haDojiRange', 'candleRangeLength'],
            'Market Activity Indicators': ['bbLength', 'bbMultiplier', 'atrLength', 'kcLength', 'kcMultiplier', 'volumeMALength'],
            'Base Weights': ['trendWeightBase', 'momentumWeightBase', 'priceActionWeightBase'],
            'Stability Controls': ['useSmoothing', 'useHysteresis']
        }
        
        for category, params in categories.items():
            summary += f"\nüìä {category}:\n"
            for param in params:
                if param in parameters:
                    summary += f"   {param}: {parameters[param]}\n"
        
        return summary

def optimize_mza_for_timeframe(data: pd.DataFrame, 
                              timeframe: str,
                              population_size: int = 30,
                              max_generations: int = 50) -> Dict:
    """
    –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è MZA –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
    
    Args:
        data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        timeframe: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
        population_size: –†–∞–∑–º–µ—Ä –ø–æ–ø—É–ª—è—Ü–∏–∏
        max_generations: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫–æ–ª–µ–Ω–∏–π
        
    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    """
    print(f"üöÄ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø MZA –î–õ–Ø –¢–ê–ô–ú–§–†–ï–ô–ú–ê {timeframe}")
    print("=" * 60)
    
    optimizer = MZAOptimizer(
        population_size=population_size,
        max_generations=max_generations
    )
    
    results = optimizer.optimize(data, verbose=True)
    
    print(f"\n‚úÖ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –î–õ–Ø {timeframe}")
    print(f"üèÜ –õ—É—á—à–∏–π Economic Value: {results['best_score']:.6f}")
    
    return results

def optimize_mza_all_timeframes(data_dict: Dict[str, pd.DataFrame],
                               population_size: int = 25,
                               max_generations: int = 40) -> Dict[str, Dict]:
    """
    –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è MZA –¥–ª—è –≤—Å–µ—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
    
    Args:
        data_dict: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º
        population_size: –†–∞–∑–º–µ—Ä –ø–æ–ø—É–ª—è—Ü–∏–∏
        max_generations: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫–æ–ª–µ–Ω–∏–π
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º
    """
    print("üöÄ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø MZA –î–õ–Ø –í–°–ï–• –¢–ê–ô–ú–§–†–ï–ô–ú–û–í")
    print("=" * 60)
    
    results = {}
    
    for tf, data in data_dict.items():
        print(f"\nüìä –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è {tf}...")
        results[tf] = optimize_mza_for_timeframe(
            data, tf, population_size, max_generations
        )
    
    # –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à–∏–π —Ç–∞–π–º—Ñ—Ä–µ–π–º
    best_tf = max(results.keys(), key=lambda x: results[x]['best_score'])
    
    print(f"\nüéØ –õ–£–ß–®–ò–ô –¢–ê–ô–ú–§–†–ï–ô–ú: {best_tf}")
    print(f"üèÜ –õ—É—á—à–∏–π Economic Value: {results[best_tf]['best_score']:.6f}")
    
    return results

if __name__ == "__main__":
    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–û–î–£–õ–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò MZA")
    print("=" * 50)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    manager = DataManager()
    data = manager.load_data(['15m'])
    
    if data and '15m' in data:
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {len(data['15m'])} –∑–∞–ø–∏—Å–µ–π")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
        optimizer = MZAOptimizer(population_size=10, max_generations=5)
        results = optimizer.optimize(data['15m'], verbose=True)
        
        print(f"\nüéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
        print(f"üèÜ –õ—É—á—à–∏–π —Å–∫–æ—Ä: {results['best_score']:.6f}")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
