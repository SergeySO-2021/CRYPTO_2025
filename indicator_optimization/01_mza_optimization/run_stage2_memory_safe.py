"""
–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ø—É—Å–∫ stage2 —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –ø–∞–º—è—Ç—å—é
–°–Ω–∏–∂–∞–µ—Ç –Ω–∞–≥—Ä—É–∑–∫—É –¥–ª—è —Ä–∞–±–æ—Ç—ã –Ω–∞ –º–∞—à–∏–Ω–∞—Ö —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π RAM
"""

import gc
from staged_optimization import StagedOptimization

def run_stage2_optimized(mza_system, combinations=100, data_samples=2500):
    """
    –ó–∞–ø—É—Å–∫ stage2 —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏
    
    Args:
        mza_system: —Å–∏—Å—Ç–µ–º–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
        combinations: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 100 –≤–º–µ—Å—Ç–æ 150)
        data_samples: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 2500 –≤–º–µ—Å—Ç–æ 3000)
    """
    # –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä
    staged_optimizer = StagedOptimization(mza_system)
    
    # –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã stage2 –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏
    print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏:")
    print(f"   - –ö–æ–º–±–∏–Ω–∞—Ü–∏–π: {combinations} (–≤–º–µ—Å—Ç–æ 150)")
    print(f"   - –ó–∞–ø–∏—Å–µ–π: {data_samples} (–≤–º–µ—Å—Ç–æ 3000)")
    print(f"   - –ü–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: 16 (–≤—Å–µ)")
    print()
    
    # –ò–∑–º–µ–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã stage2
    staged_optimizer.stages['stage2_balanced_1h']['combinations'] = combinations
    staged_optimizer.stages['stage2_balanced_1h']['data_samples'] = data_samples
    
    # –û—á–∏—â–∞–µ–º –ø–∞–º—è—Ç—å –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
    gc.collect()
    
    print("üöÄ –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ stage2...")
    print("="*70)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º stage2
    results = staged_optimizer.run_stage('stage2_balanced_1h')
    
    # –û—á–∏—â–∞–µ–º –ø–∞–º—è—Ç—å –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    gc.collect()
    
    return results

# –†–ï–ñ–ò–ú–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø:
# ======================

# 1. –≠–ö–û–ù–û–ú–ù–´–ô –†–ï–ñ–ò–ú (–¥–ª—è –º–∞—à–∏–Ω —Å < 4GB RAM):
# results = run_stage2_optimized(mza_system, combinations=75, data_samples=2000)

# 2. –°–ë–ê–õ–ê–ù–°–ò–†–û–í–ê–ù–ù–´–ô –†–ï–ñ–ò–ú (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è):
# results = run_stage2_optimized(mza_system, combinations=100, data_samples=2500)

# 3. –ü–†–ï–ú–ò–£–ú –†–ï–ñ–ò–ú (–¥–ª—è –º–∞—à–∏–Ω —Å > 8GB RAM):
# results = run_stage2_optimized(mza_system, combinations=150, data_samples=3000)

if __name__ == "__main__":
    print("üí° –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –≤ notebook:")
    print("   from run_stage2_memory_safe import run_stage2_optimized")
    print("   results = run_stage2_optimized(mza_system, combinations=100, data_samples=2500)")


