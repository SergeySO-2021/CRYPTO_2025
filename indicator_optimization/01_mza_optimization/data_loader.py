# üìä –ú–û–î–£–õ–¨ –ó–ê–ì–†–£–ó–ö–ò –î–ê–ù–ù–´–• –° –í–ù–ï–®–ù–ò–• –ò–°–¢–û–ß–ù–ò–ö–û–í
# ==================================================

import requests
import pandas as pd
import numpy as np
import time
import os
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple

class BinanceDataLoader:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å Binance API
    """
    
    def __init__(self, base_url: str = "https://api.binance.com/api/v3"):
        self.base_url = base_url
        self.session = requests.Session()
        
    def download_period_data(self, 
                           symbol: str = "BTCUSDT", 
                           interval: str = "15m", 
                           start_date: str = "2024-01-22", 
                           end_date: Optional[str] = None,
                           max_requests: int = 200) -> Optional[pd.DataFrame]:
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é BTCUSDT)
            interval: –¢–∞–π–º—Ñ—Ä–µ–π–º (15m, 30m, 1h, 4h, 1d)
            start_date: –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
            end_date: –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ–∫—É—â–∞—è)
            max_requests: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤
            
        Returns:
            DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            if end_date is None:
                end_date = datetime.now().strftime("%Y-%m-%d")
            
            print(f"üìä –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ {symbol} –∑–∞ –ø–µ—Ä–∏–æ–¥ {start_date} - {end_date}")
            print(f"üïê –§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: YYYY-MM-DD HH:MM:SS")
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –≤ timestamp (–º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã)
            start_timestamp = int(datetime.strptime(start_date, "%Y-%m-%d").timestamp() * 1000)
            end_timestamp = int(datetime.strptime(end_date, "%Y-%m-%d").timestamp() * 1000)
            
            print(f"üïê –ù–∞—á–∞–ª—å–Ω—ã–π timestamp: {start_timestamp} ({datetime.fromtimestamp(start_timestamp/1000)})")
            print(f"üïê –ö–æ–Ω–µ—á–Ω—ã–π timestamp: {end_timestamp} ({datetime.fromtimestamp(end_timestamp/1000)})")
            
            all_data = []
            current_end_time = end_timestamp
            
            request_count = 0
            consecutive_empty_requests = 0
            max_empty_requests = 3
            reached_start_period = False
            
            while current_end_time > start_timestamp and request_count < max_requests:
                request_count += 1
                print(f"üîÑ –ó–∞–ø—Ä–æ—Å {request_count}...")
                
                url = f"{self.base_url}/klines"
                params = {
                    'symbol': symbol,
                    'interval': interval,
                    'limit': 1000,
                    'endTime': current_end_time
                }
                
                response = self.session.get(url, params=params)
                response.raise_for_status()
                
                data = response.json()
                
                if not data:
                    print("‚ö†Ô∏è –ù–µ—Ç –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö")
                    consecutive_empty_requests += 1
                    if consecutive_empty_requests >= max_empty_requests:
                        print("üõë –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø—É—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–¥—Ä—è–¥, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è")
                        break
                    current_end_time = current_end_time - (24 * 60 * 60 * 1000)
                    time.sleep(0.1)
                    continue
                
                consecutive_empty_requests = 0
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–µ—Ä–∏–æ–¥—É
                filtered_data = []
                earliest_timestamp = None
                
                for candle in data:
                    candle_time = candle[0]
                    if candle_time >= start_timestamp:
                        filtered_data.append(candle)
                    else:
                        reached_start_period = True
                        break
                    
                    if earliest_timestamp is None or candle_time < earliest_timestamp:
                        earliest_timestamp = candle_time
                
                all_data.extend(filtered_data)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º end_time –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                if earliest_timestamp is not None:
                    current_end_time = earliest_timestamp - 1
                else:
                    current_end_time = current_end_time - (24 * 60 * 60 * 1000)
                
                time.sleep(0.1)
                
                print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(filtered_data)} –∑–∞–ø–∏—Å–µ–π, –≤—Å–µ–≥–æ: {len(all_data)}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
                if len(filtered_data) < 1000 or reached_start_period:
                    if reached_start_period:
                        print("üìÖ –î–æ—Å—Ç–∏–≥–ª–∏ –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞")
                    else:
                        print("üìÖ –ü–æ–ª—É—á–∏–ª–∏ –º–µ–Ω—å—à–µ 1000 –∑–∞–ø–∏—Å–µ–π")
                    break
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                if len(all_data) % 10000 == 0 and len(all_data) > 0:
                    print(f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {len(all_data)} –∑–∞–ø–∏—Å–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω–æ")
            
            if not all_data:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
                return None
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ DataFrame
            df = pd.DataFrame(all_data, columns=[
                'timestamp', 'open', 'high', 'low', 'close', 'volume',
                'close_time', 'quote_asset_volume', 'number_of_trades',
                'taker_buy_base_asset_volume', 'taker_buy_quote_asset_volume', 'ignore'
            ])
            
            # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
            df = df[['timestamp', 'open', 'high', 'low', 'close', 'volume']]
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
            df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
            for col in ['open', 'high', 'low', 'close', 'volume']:
                df[col] = pd.to_numeric(df[col])
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
            df['timestamps'] = df['timestamp'].dt.strftime('%Y-%m-%d %H:%M:%S')
            df = df.drop('timestamp', axis=1)
            
            # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏
            df.columns = ['open', 'high', 'low', 'close', 'volume', 'timestamps']
            df = df[['timestamps', 'open', 'high', 'low', 'close', 'volume']]
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            df = df.sort_values('timestamps').reset_index(drop=True)
            
            print(f"‚úÖ –ò–¢–û–ì–û –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π")
            print(f"üìÖ –ü–µ—Ä–∏–æ–¥: {df['timestamps'].min()} - {df['timestamps'].max()}")
            print(f"üìä Volume: {df['volume'].min():.2f} - {df['volume'].max():.2f}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞
            actual_start = df['timestamps'].min()
            expected_start = f"{start_date} 00:00:00"
            
            if actual_start <= expected_start:
                print(f"‚úÖ –î–æ—Å—Ç–∏–≥–ª–∏ –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞: {actual_start}")
            else:
                print(f"‚ö†Ô∏è –ù–µ –¥–æ—Å—Ç–∏–≥–ª–∏ –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞. –ü–æ–ª—É—á–µ–Ω–æ: {actual_start}, –æ–∂–∏–¥–∞–ª–æ—Å—å: {expected_start}")
                print(f"üí° –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ - Binance API –∏–º–µ–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ")
            
            return df
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
            return None
    
    def download_all_timeframes(self, 
                              symbol: str = "BTCUSDT", 
                              start_date: str = "2024-01-22",
                              end_date: Optional[str] = None) -> Dict[str, pd.DataFrame]:
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å–µ—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            start_date: –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞
            end_date: –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º
        """
        timeframes = {
            '15m': {'interval': '15m'},
            '30m': {'interval': '30m'},
            '1h': {'interval': '1h'},
            '4h': {'interval': '4h'},
            '1d': {'interval': '1d'}
        }
        
        results = {}
        
        for tf, params in timeframes.items():
            print(f"\nüîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è {tf} –∑–∞ –ø–µ—Ä–∏–æ–¥ {start_date} - {end_date or '—Å–µ–≥–æ–¥–Ω—è'}...")
            
            df = self.download_period_data(symbol, params['interval'], start_date, end_date)
            
            if df is not None:
                results[tf] = df
                print(f"‚úÖ {tf}: {len(df):,} –∑–∞–ø–∏—Å–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω–æ")
            else:
                print(f"‚ùå {tf}: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º–∏
            time.sleep(2)
        
        return results

class DataManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
    """
    
    def __init__(self, base_path: str = None):
        self.base_path = base_path or os.getcwd()
        if 'indicator_optimization' in self.base_path:
            self.base_path = os.path.dirname(os.path.dirname(self.base_path))
    
    def save_data(self, data: Dict[str, pd.DataFrame], prefix: str = "df_btc") -> Dict[str, str]:
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ CSV —Ñ–∞–π–ª—ã
        
        Args:
            data: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º
            prefix: –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –ø—É—Ç—è–º–∏ –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º —Ñ–∞–π–ª–∞–º
        """
        saved_files = {}
        
        for tf, df in data.items():
            filename = f"{prefix}_{tf}_complete.csv"
            filepath = os.path.join(self.base_path, filename)
            
            try:
                df.to_csv(filepath, index=False)
                saved_files[tf] = filepath
                print(f"üíæ {tf}: –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {filename}")
            except Exception as e:
                print(f"‚ùå {tf}: –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è - {e}")
        
        return saved_files
    
    def load_data(self, timeframes: List[str] = None) -> Dict[str, pd.DataFrame]:
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ CSV —Ñ–∞–π–ª–æ–≤
        
        Args:
            timeframes: –°–ø–∏—Å–æ–∫ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        """
        if timeframes is None:
            timeframes = ['15m', '30m', '1h', '4h', '1d']
        
        loaded_data = {}
        
        for tf in timeframes:
            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ñ–∞–π–ª–æ–≤: complete -> matching -> large -> real -> original
            file_priorities = [
                f"df_btc_{tf}_complete.csv",
                f"df_btc_{tf}_matching.csv", 
                f"df_btc_{tf}_large.csv",
                f"df_btc_{tf}_real.csv",
                f"df_btc_{tf}.csv"
            ]
            
            df = None
            for filename in file_priorities:
                filepath = os.path.join(self.base_path, filename)
                if os.path.exists(filepath):
                    try:
                        df = pd.read_csv(filepath)
                        print(f"‚úÖ {tf}: –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ {filename} ({len(df)} –∑–∞–ø–∏—Å–µ–π)")
                        break
                    except Exception as e:
                        print(f"‚ùå {tf}: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {filename} - {e}")
                        continue
            
            if df is not None:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Volume
                if 'volume' not in df.columns:
                    print(f"‚ö†Ô∏è {tf}: Volume –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–π")
                    price_range = df['high'] - df['low']
                    avg_price = df['close'].mean()
                    np.random.seed(42)
                    random_factor = np.random.uniform(0.5, 2.0, len(df))
                    df['volume'] = (price_range * avg_price * random_factor).astype(int)
                
                loaded_data[tf] = df
            else:
                print(f"‚ùå {tf}: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
        
        return loaded_data
    
    def get_data_summary(self, data: Dict[str, pd.DataFrame]) -> Dict:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø–æ –¥–∞–Ω–Ω—ã–º
        
        Args:
            data: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å–≤–æ–¥–∫–æ–π
        """
        summary = {
            'total_records': sum(len(df) for df in data.values()),
            'timeframes': list(data.keys()),
            'timeframe_details': {}
        }
        
        for tf, df in data.items():
            summary['timeframe_details'][tf] = {
                'records': len(df),
                'period': f"{df['timestamps'].min()} - {df['timestamps'].max()}",
                'volume_range': f"{df['volume'].min():.2f} - {df['volume'].max():.2f}",
                'price_range': f"{df['close'].min():.2f} - {df['close'].max():.2f}"
            }
        
        return summary

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
def download_btc_data(start_date: str = "2024-01-22", 
                     end_date: Optional[str] = None,
                     save_to_csv: bool = True) -> Dict[str, pd.DataFrame]:
    """
    –ë—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö BTC
    
    Args:
        start_date: –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞
        end_date: –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞
        save_to_csv: –°–æ—Ö—Ä–∞–Ω—è—Ç—å –ª–∏ –≤ CSV
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏
    """
    loader = BinanceDataLoader()
    manager = DataManager()
    
    print("üöÄ –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• BTC –° BINANCE")
    print("=" * 50)
    
    data = loader.download_all_timeframes("BTCUSDT", start_date, end_date)
    
    if save_to_csv and data:
        print("\nüíæ –°–û–•–†–ê–ù–ï–ù–ò–ï –î–ê–ù–ù–´–•")
        print("=" * 30)
        manager.save_data(data)
    
    return data

def load_btc_data(timeframes: List[str] = None) -> Dict[str, pd.DataFrame]:
    """
    –ë—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö BTC –∏–∑ —Ñ–∞–π–ª–æ–≤
    
    Args:
        timeframes: –°–ø–∏—Å–æ–∫ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏
    """
    manager = DataManager()
    
    print("üìä –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• BTC –ò–ó –§–ê–ô–õ–û–í")
    print("=" * 40)
    
    data = manager.load_data(timeframes)
    
    if data:
        summary = manager.get_data_summary(data)
        print(f"\nüìà –ò–¢–û–ì–û: {summary['total_records']:,} –∑–∞–ø–∏—Å–µ–π")
        print(f"üìä –¢–∞–π–º—Ñ—Ä–µ–π–º–æ–≤: {len(summary['timeframes'])}")
    
    return data

if __name__ == "__main__":
    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    print("üìä –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–û–î–£–õ–Ø –ó–ê–ì–†–£–ó–ö–ò –î–ê–ù–ù–´–•")
    print("=" * 50)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–æ–≤
    data = load_btc_data(['15m', '1h'])
    
    if data:
        print("\n‚úÖ –ú–æ–¥—É–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        for tf, df in data.items():
            print(f"üìä {tf}: {len(df)} –∑–∞–ø–∏—Å–µ–π")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
