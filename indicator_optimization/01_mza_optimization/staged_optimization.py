"""
–ü–æ—ç—Ç–∞–ø–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ MZA
–†–∞–∑–±–∏–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞ —ç—Ç–∞–ø—ã –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∫–∞—á–µ—Å—Ç–≤–∞
"""

import pandas as pd
import numpy as np
import json
from pathlib import Path
from datetime import datetime
from mza_parameter_optimizer import MZAParameterOptimizer
import gc

class StagedOptimization:
    """
    –ü–æ—ç—Ç–∞–ø–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    """
    
    def __init__(self, mza_system, results_dir='optimization_results'):
        self.mza_system = mza_system
        self.optimizer = MZAParameterOptimizer()
        self.results_dir = Path(results_dir)
        self.results_dir.mkdir(exist_ok=True)
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —ç—Ç–∞–ø–æ–≤
        self.stages = {
            'stage1_quick_test': {
                'name': 'üîÑ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç (–Ω–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, –≤—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å)',
                'timeframes': ['1h'],
                'data_samples': 2000,
                'combinations': 50,
                'all_params': False,
                'description': '–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã'
            },
            'stage2_balanced_1h': {
                'name': '‚öñÔ∏è –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è 1h',
                'timeframes': ['1h'],
                'data_samples': 3000,
                'combinations': 150,
                'all_params': True,
                'description': '–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è 1h'
            },
            'stage3_balanced_4h': {
                'name': '‚öñÔ∏è –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è 4h',
                'timeframes': ['4h'],
                'data_samples': 3000,
                'combinations': 150,
                'all_params': True,
                'description': '–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è 4h'
            },
            'stage4_deep_1h': {
                'name': 'üî¨ –ì–ª—É–±–æ–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è 1h',
                'timeframes': ['1h'],
                'data_samples': 4000,
                'combinations': 200,
                'all_params': True,
                'description': '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–ª—è 1h'
            },
            'stage5_deep_4h': {
                'name': 'üî¨ –ì–ª—É–±–æ–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è 4h',
                'timeframes': ['4h'],
                'data_samples': 4000,
                'combinations': 200,
                'all_params': True,
                'description': '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–ª—è 4h'
            },
            'stage6_additional_timeframes': {
                'name': 'üìä –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã (15m, 30m, 1d)',
                'timeframes': ['15m', '30m', '1d'],
                'data_samples': 3000,
                'combinations': 100,
                'all_params': True,
                'description': '–ë—ã—Å—Ç—Ä–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤'
            }
        }
        
    def run_stage(self, stage_id, clear_memory=True):
        """
        –ó–∞–ø—É—Å–∫ –æ–¥–Ω–æ–≥–æ —ç—Ç–∞–ø–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        
        Args:
            stage_id: ID —ç—Ç–∞–ø–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞
            clear_memory: –û—á–∏—â–∞—Ç—å –ª–∏ –ø–∞–º—è—Ç—å –ø–æ—Å–ª–µ —ç—Ç–∞–ø–∞
        """
        if stage_id not in self.stages:
            print(f"‚ùå –≠—Ç–∞–ø {stage_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return None
            
        stage = self.stages[stage_id]
        print(f"\n{'='*70}")
        print(f"üéØ –ó–ê–ü–£–°–ö –≠–¢–ê–ü–ê: {stage['name']}")
        print(f"üìù {stage['description']}")
        print(f"{'='*70}\n")
        
        results = {}
        
        for tf in stage['timeframes']:
            if tf not in self.mza_system.data:
                print(f"‚ùå –î–∞–Ω–Ω—ã–µ –¥–ª—è {tf} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                continue
                
            print(f"\nüìä –¢–∞–π–º—Ñ—Ä–µ–π–º: {tf}")
            print(f"   üìà –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(self.mza_system.data[tf]):,}")
            print(f"   üìä –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {stage['data_samples']:,} –∑–∞–ø–∏—Å–µ–π")
            print(f"   üîß –ö–æ–º–±–∏–Ω–∞—Ü–∏–π: {stage['combinations']}")
            print(f"   ‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {'16 (–≤—Å–µ)' if stage['all_params'] else '12 (–∫–ª—é—á–µ–≤—ã–µ)'}")
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            data_sample = self.mza_system.data[tf].tail(stage['data_samples']).copy()
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—É—é –∫–æ–ª–æ–Ω–∫—É volume –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç (—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è MZA)
            if 'volume' not in data_sample.columns:
                data_sample['volume'] = (data_sample['high'] + data_sample['low']) / 2  # –ü—Ä–æ—Å—Ç–∞—è –∞–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏—è
            
            try:
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                original_params = self.optimizer.optimizable_params.copy()
                if not stage['all_params']:
                    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                    self.optimizer.optimizable_params = dict(list(original_params.items())[:12])
                
                # –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
                result = self.optimizer.optimize_parameters(
                    data_sample, 
                    max_combinations=stage['combinations']
                )
                
                results[tf] = result
                
                print(f"   ‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                print(f"   üèÜ Economic Value: {result['best_score']:.6f}")
                print(f"   üìä –¢–µ—Å—Ç–æ–≤: {result['successful_tests']}/{result['total_tested']}")
                
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                self.optimizer.optimizable_params = original_params
                
                # –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏
                del data_sample
                gc.collect()
                
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
                import traceback
                traceback.print_exc()
                results[tf] = {'error': str(e)}
                
                del data_sample
                gc.collect()
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —ç—Ç–∞–ø–∞
        self._save_stage_results(stage_id, results, stage)
        
        print(f"\n‚úÖ –≠—Ç–∞–ø {stage_id} –∑–∞–≤–µ—Ä—à–µ–Ω")
        
        return results
    
    def _save_stage_results(self, stage_id, results, stage_config):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —ç—Ç–∞–ø–∞"""
        save_data = {
            'stage_id': stage_id,
            'stage_name': stage_config['name'],
            'timestamp': datetime.now().isoformat(),
            'config': stage_config,
            'results': results
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º JSON
        json_file = self.results_dir / f"{stage_id}_results.json"
        with open(json_file, 'w', encoding='utf-8') as f:
            json.dump(save_data, f, indent=2, default=str)
        
        print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {json_file}")
    
    def load_all_results(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        all_results = {}
        
        for stage_id in self.stages.keys():
            json_file = self.results_dir / f"{stage_id}_results.json"
            if json_file.exists():
                with open(json_file, 'r', encoding='utf-8') as f:
                    all_results[stage_id] = json.load(f)
        
        return all_results
    
    def get_summary_report(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ –≤—Å–µ–º —ç—Ç–∞–ø–∞–º"""
        print("\n" + "="*70)
        print("üìä –°–í–û–î–ù–´–ô –û–¢–ß–ï–¢ –û–ë –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò")
        print("="*70)
        
        all_results = self.load_all_results()
        
        if not all_results:
            print("\n‚ùå –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            return
        
        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º
        timeframe_results = {}
        
        for stage_id, stage_data in all_results.items():
            stage_name = stage_data['stage_name']
            results = stage_data['results']
            
            for tf, result in results.items():
                if 'error' not in result:
                    if tf not in timeframe_results:
                        timeframe_results[tf] = []
                    
                    timeframe_results[tf].append({
                        'stage': stage_name,
                        'economic_value': result['best_score'],
                        'total_tested': result['total_tested'],
                        'successful_tests': result['successful_tests']
                    })
        
        # –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º
        print(f"\n{'–¢–∞–π–º—Ñ—Ä–µ–π–º':<8} {'–≠—Ç–∞–ø':<40} {'Economic Value':<15} {'–¢–µ—Å—Ç–æ–≤':<15}")
        print("-" * 70)
        
        for tf, results_list in timeframe_results.items():
            print(f"\nüìä {tf}")
            for result in sorted(results_list, key=lambda x: x['economic_value'], reverse=True):
                print(f"   {result['stage'][:40]:<40} {result['economic_value']:.6f}     {result['successful_tests']}/{result['total_tested']}")
        
        # –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print(f"\nüèÜ –õ–£–ß–®–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û –¢–ê–ô–ú–§–†–ï–ô–ú–ê–ú:")
        print("-" * 70)
        
        for tf, results_list in timeframe_results.items():
            best = max(results_list, key=lambda x: x['economic_value'])
            print(f"{tf:>8}: {best['economic_value']:.6f} (—ç—Ç–∞–ø: {best['stage'][:40]})")
        
    def run_all_stages(self, start_from_stage=None):
        """
        –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —ç—Ç–∞–ø–æ–≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
        
        Args:
            start_from_stage: –° –∫–∞–∫–æ–≥–æ —ç—Ç–∞–ø–∞ –Ω–∞—á–∞—Ç—å (None = —Å –Ω–∞—á–∞–ª–∞)
        """
        stage_ids = list(self.stages.keys())
        
        if start_from_stage:
            try:
                start_idx = stage_ids.index(start_from_stage)
                stage_ids = stage_ids[start_idx:]
                print(f"üöÄ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —ç—Ç–∞–ø–∞: {start_from_stage}")
            except ValueError:
                print(f"‚ùå –≠—Ç–∞–ø {start_from_stage} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
        
        print(f"\nüéØ –ë–£–î–ï–¢ –í–´–ü–û–õ–ù–ï–ù–û {len(stage_ids)} –≠–¢–ê–ü–û–í")
        
        for i, stage_id in enumerate(stage_ids, 1):
            print(f"\n{'='*70}")
            print(f"üìå –≠–¢–ê–ü {i}/{len(stage_ids)}: {self.stages[stage_id]['name']}")
            print(f"{'='*70}")
            
            try:
                results = self.run_stage(stage_id)
                
                if results:
                    print(f"‚úÖ –≠—Ç–∞–ø {i} –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                else:
                    print(f"‚ö†Ô∏è –≠—Ç–∞–ø {i} –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏")
                    
            except KeyboardInterrupt:
                print(f"\n‚ö†Ô∏è –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                print(f"üíæ –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –ú–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å —ç—Ç–∞–ø–∞ {stage_id}")
                break
                
            except Exception as e:
                print(f"\n‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ {i}: {e}")
                import traceback
                traceback.print_exc()
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        self.get_summary_report()
        
        print(f"\n‚úÖ –í–°–ï –≠–¢–ê–ü–´ –ó–ê–í–ï–†–®–ï–ù–´")
        print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {self.results_dir}")

